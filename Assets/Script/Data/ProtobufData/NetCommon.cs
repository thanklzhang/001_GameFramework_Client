// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetCommon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetCommon {

  /// <summary>Holder for reflection information generated from NetCommon.proto</summary>
  public static partial class NetCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for NetCommon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9OZXRDb21tb24ucHJvdG8SCU5ldENvbW1vbiJHCgtDb21iYXRGcmFtZRIK",
            "CgJpZBgBIAEoBRIsCgRvcHRzGAIgAygLMh4uTmV0Q29tbW9uLkNvbWJhdFBs",
            "YXllck9wZXJhdGUiVgoTQ29tYmF0UGxheWVyT3BlcmF0ZRIMCgRzZWF0GAEg",
            "ASgFEgwKBHR5cGUYAiABKAUSCQoBeBgDIAEoBRIJCgF5GAQgASgFEg0KBXZh",
            "bHVlGAUgASgFKmUKBU1zZ0lkEgkKBUZpcnN0EAASCQoFQmVnaW4QZBIWChJI",
            "ZWFydEJlYXRIYW5kc2hha2UQZRIRCg1IZWFydEJlYXRTZW5kEGYSEQoNSGVh",
            "cnRCZWF0QmFjaxBnEggKA0VuZBD0A2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NetCommon.MsgId), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetCommon.CombatFrame), global::NetCommon.CombatFrame.Parser, new[]{ "Id", "Opts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetCommon.CombatPlayerOperate), global::NetCommon.CombatPlayerOperate.Parser, new[]{ "Seat", "Type", "X", "Y", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgId {
    [pbr::OriginalName("First")] First = 0,
    [pbr::OriginalName("Begin")] Begin = 100,
    [pbr::OriginalName("HeartBeatHandshake")] HeartBeatHandshake = 101,
    [pbr::OriginalName("HeartBeatSend")] HeartBeatSend = 102,
    [pbr::OriginalName("HeartBeatBack")] HeartBeatBack = 103,
    [pbr::OriginalName("End")] End = 500,
  }

  #endregion

  #region Messages
  public sealed partial class CombatFrame : pb::IMessage<CombatFrame> {
    private static readonly pb::MessageParser<CombatFrame> _parser = new pb::MessageParser<CombatFrame>(() => new CombatFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetCommon.NetCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatFrame(CombatFrame other) : this() {
      id_ = other.id_;
      opts_ = other.opts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatFrame Clone() {
      return new CombatFrame(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "opts" field.</summary>
    public const int OptsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NetCommon.CombatPlayerOperate> _repeated_opts_codec
        = pb::FieldCodec.ForMessage(18, global::NetCommon.CombatPlayerOperate.Parser);
    private readonly pbc::RepeatedField<global::NetCommon.CombatPlayerOperate> opts_ = new pbc::RepeatedField<global::NetCommon.CombatPlayerOperate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetCommon.CombatPlayerOperate> Opts {
      get { return opts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!opts_.Equals(other.opts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= opts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      opts_.WriteTo(output, _repeated_opts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += opts_.CalculateSize(_repeated_opts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatFrame other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      opts_.Add(other.opts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            opts_.AddEntriesFrom(input, _repeated_opts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombatPlayerOperate : pb::IMessage<CombatPlayerOperate> {
    private static readonly pb::MessageParser<CombatPlayerOperate> _parser = new pb::MessageParser<CombatPlayerOperate>(() => new CombatPlayerOperate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatPlayerOperate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetCommon.NetCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatPlayerOperate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatPlayerOperate(CombatPlayerOperate other) : this() {
      seat_ = other.seat_;
      type_ = other.type_;
      x_ = other.x_;
      y_ = other.y_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatPlayerOperate Clone() {
      return new CombatPlayerOperate(this);
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 1;
    private int seat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatPlayerOperate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatPlayerOperate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seat != other.Seat) return false;
      if (Type != other.Type) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seat != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Seat);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (Value != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatPlayerOperate other) {
      if (other == null) {
        return;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seat = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
