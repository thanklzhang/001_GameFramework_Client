// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Team.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetProto {

  /// <summary>Holder for reflection information generated from Team.proto</summary>
  public static partial class TeamReflection {

    #region Descriptor
    /// <summary>File descriptor for Team.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TeamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpUZWFtLnByb3RvEghOZXRQcm90bxoMQ29tbW9uLnByb3RvIn4KCFRlYW1S",
            "b29tEg4KBnJvb21JZBgBIAEoBRITCgt0ZWFtU3RhZ2VJZBgCIAEoBRIQCghy",
            "b29tTmFtZRgDIAEoCRINCgVzdGF0ZRgEIAEoBRIsCgpwbGF5ZXJMaXN0GAUg",
            "AygLMhguTmV0UHJvdG8uVGVhbVJvb21QbGF5ZXIimgEKDlRlYW1Sb29tUGxh",
            "eWVyEi0KCnBsYXllckluZm8YASABKAsyGS5OZXRQcm90by5QbGF5ZXJJbmZv",
            "UHJvdG8SFAoMaXNSb29tTWFzdGVyGAIgASgIEhIKCmlzSGFzUmVhZHkYAyAB",
            "KAgSDAoEc2VhdBgEIAEoBRIhCgRoZXJvGAUgASgLMhMuTmV0UHJvdG8uSGVy",
            "b1Byb3RvIhMKEWNzR2V0VGVhbVJvb21MaXN0IkoKEXNjR2V0VGVhbVJvb21M",
            "aXN0EgsKA2VychgBIAEoBRIoCgx0ZWFtUm9vbUxpc3QYAiADKAsyEi5OZXRQ",
            "cm90by5UZWFtUm9vbSInChBjc0NyZWF0ZVRlYW1Sb29tEhMKC3RlYW1TdGFn",
            "ZUlkGAEgASgFIkUKEHNjQ3JlYXRlVGVhbVJvb20SCwoDZXJyGAEgASgFEiQK",
            "CHRlYW1Sb29tGAIgASgLMhIuTmV0UHJvdG8uVGVhbVJvb20iJQoPY3NMZWF2",
            "ZVRlYW1Sb29tEhIKCnRlYW1Sb29tSWQYASABKAUiHgoPc2NMZWF2ZVRlYW1S",
            "b29tEgsKA2VychgBIAEoBSIqChVzY05vdGlmeUxlYXZlVGVhbVJvb20SEQoJ",
            "cGxheWVyVWlkGAEgASgFIiUKD2NzRW50ZXJUZWFtUm9vbRISCgp0ZWFtUm9v",
            "bUlkGAEgASgFIkQKD3NjRW50ZXJUZWFtUm9vbRILCgNlcnIYASABKAUSJAoI",
            "dGVhbVJvb20YAiABKAsyEi5OZXRQcm90by5UZWFtUm9vbSJHChtzY05vdGlm",
            "eVBsYXllckVudGVyVGVhbVJvb20SKAoGcGxheWVyGAEgASgLMhguTmV0UHJv",
            "dG8uVGVhbVJvb21QbGF5ZXIiMgobY3NTZWxlY3RUZWFtU3RhZ2VJblRlYW1S",
            "b29tEhMKC3RlYW1TdGFnZUlkGAEgASgFIj8KG3NjU2VsZWN0VGVhbVN0YWdl",
            "SW5UZWFtUm9vbRILCgNlcnIYASABKAUSEwoLdGVhbVN0YWdlSWQYAiABKAUi",
            "MQoac2NOb3RpZnlDaGFuZ2VUZWFtUm9vbUluZm8SEwoLdGVhbVN0YWdlSWQY",
            "ASABKAUiQQoZY3NTZWxlY3RVc2VIZXJvSW5UZWFtUm9vbRISCgp0ZWFtUm9v",
            "bUlkGAEgASgFEhAKCGhlcm9HdWlkGAIgASgFIjoKGXNjU2VsZWN0VXNlSGVy",
            "b0luVGVhbVJvb20SCwoDZXJyGAEgASgFEhAKCGhlcm9HdWlkGAIgASgFIkMK",
            "HGNzQ2hhbmdlUmVhZHlTdGF0ZUluVGVhbVJvb20SEgoKdGVhbVJvb21JZBgB",
            "IAEoBRIPCgdpc1JlYWR5GAIgASgIIisKHHNjQ2hhbmdlUmVhZHlTdGF0ZUlu",
            "VGVhbVJvb20SCwoDZXJyGAEgASgFIk4KInNjTm90aWZ5Q2hhbmdlUGxheWVy",
            "SW5mb0luVGVhbVJvb20SKAoGcGxheWVyGAEgASgLMhguTmV0UHJvdG8uVGVh",
            "bVJvb21QbGF5ZXIiEwoRY3NTdGFydFRlYW1CYXR0bGUiIAoRc2NTdGFydFRl",
            "YW1CYXR0bGUSCwoDZXJyGAEgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NetProto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.TeamRoom), global::NetProto.TeamRoom.Parser, new[]{ "RoomId", "TeamStageId", "RoomName", "State", "PlayerList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.TeamRoomPlayer), global::NetProto.TeamRoomPlayer.Parser, new[]{ "PlayerInfo", "IsRoomMaster", "IsHasReady", "Seat", "Hero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csGetTeamRoomList), global::NetProto.csGetTeamRoomList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scGetTeamRoomList), global::NetProto.scGetTeamRoomList.Parser, new[]{ "Err", "TeamRoomList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csCreateTeamRoom), global::NetProto.csCreateTeamRoom.Parser, new[]{ "TeamStageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scCreateTeamRoom), global::NetProto.scCreateTeamRoom.Parser, new[]{ "Err", "TeamRoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csLeaveTeamRoom), global::NetProto.csLeaveTeamRoom.Parser, new[]{ "TeamRoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scLeaveTeamRoom), global::NetProto.scLeaveTeamRoom.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyLeaveTeamRoom), global::NetProto.scNotifyLeaveTeamRoom.Parser, new[]{ "PlayerUid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csEnterTeamRoom), global::NetProto.csEnterTeamRoom.Parser, new[]{ "TeamRoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scEnterTeamRoom), global::NetProto.scEnterTeamRoom.Parser, new[]{ "Err", "TeamRoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyPlayerEnterTeamRoom), global::NetProto.scNotifyPlayerEnterTeamRoom.Parser, new[]{ "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csSelectTeamStageInTeamRoom), global::NetProto.csSelectTeamStageInTeamRoom.Parser, new[]{ "TeamStageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scSelectTeamStageInTeamRoom), global::NetProto.scSelectTeamStageInTeamRoom.Parser, new[]{ "Err", "TeamStageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyChangeTeamRoomInfo), global::NetProto.scNotifyChangeTeamRoomInfo.Parser, new[]{ "TeamStageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csSelectUseHeroInTeamRoom), global::NetProto.csSelectUseHeroInTeamRoom.Parser, new[]{ "TeamRoomId", "HeroGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scSelectUseHeroInTeamRoom), global::NetProto.scSelectUseHeroInTeamRoom.Parser, new[]{ "Err", "HeroGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csChangeReadyStateInTeamRoom), global::NetProto.csChangeReadyStateInTeamRoom.Parser, new[]{ "TeamRoomId", "IsReady" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scChangeReadyStateInTeamRoom), global::NetProto.scChangeReadyStateInTeamRoom.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyChangePlayerInfoInTeamRoom), global::NetProto.scNotifyChangePlayerInfoInTeamRoom.Parser, new[]{ "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csStartTeamBattle), global::NetProto.csStartTeamBattle.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scStartTeamBattle), global::NetProto.scStartTeamBattle.Parser, new[]{ "Err" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TeamRoom : pb::IMessage<TeamRoom> {
    private static readonly pb::MessageParser<TeamRoom> _parser = new pb::MessageParser<TeamRoom>(() => new TeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRoom(TeamRoom other) : this() {
      roomId_ = other.roomId_;
      teamStageId_ = other.teamStageId_;
      roomName_ = other.roomName_;
      state_ = other.state_;
      playerList_ = other.playerList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRoom Clone() {
      return new TeamRoom(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "teamStageId" field.</summary>
    public const int TeamStageIdFieldNumber = 2;
    private int teamStageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamStageId {
      get { return teamStageId_; }
      set {
        teamStageId_ = value;
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 3;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    /// 0 准备中 , 1 战斗中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "playerList" field.</summary>
    public const int PlayerListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NetProto.TeamRoomPlayer> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(42, global::NetProto.TeamRoomPlayer.Parser);
    private readonly pbc::RepeatedField<global::NetProto.TeamRoomPlayer> playerList_ = new pbc::RepeatedField<global::NetProto.TeamRoomPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.TeamRoomPlayer> PlayerList {
      get { return playerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (TeamStageId != other.TeamStageId) return false;
      if (RoomName != other.RoomName) return false;
      if (State != other.State) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (TeamStageId != 0) hash ^= TeamStageId.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= playerList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (TeamStageId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamStageId);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomName);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (TeamStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamStageId);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.TeamStageId != 0) {
        TeamStageId = other.TeamStageId;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.State != 0) {
        State = other.State;
      }
      playerList_.Add(other.playerList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            TeamStageId = input.ReadInt32();
            break;
          }
          case 26: {
            RoomName = input.ReadString();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 42: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamRoomPlayer : pb::IMessage<TeamRoomPlayer> {
    private static readonly pb::MessageParser<TeamRoomPlayer> _parser = new pb::MessageParser<TeamRoomPlayer>(() => new TeamRoomPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamRoomPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRoomPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRoomPlayer(TeamRoomPlayer other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      isRoomMaster_ = other.isRoomMaster_;
      isHasReady_ = other.isHasReady_;
      seat_ = other.seat_;
      Hero = other.hero_ != null ? other.Hero.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamRoomPlayer Clone() {
      return new TeamRoomPlayer(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::NetProto.PlayerInfoProto playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PlayerInfoProto PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "isRoomMaster" field.</summary>
    public const int IsRoomMasterFieldNumber = 2;
    private bool isRoomMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRoomMaster {
      get { return isRoomMaster_; }
      set {
        isRoomMaster_ = value;
      }
    }

    /// <summary>Field number for the "isHasReady" field.</summary>
    public const int IsHasReadyFieldNumber = 3;
    private bool isHasReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHasReady {
      get { return isHasReady_; }
      set {
        isHasReady_ = value;
      }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 4;
    private int seat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "hero" field.</summary>
    public const int HeroFieldNumber = 5;
    private global::NetProto.HeroProto hero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.HeroProto Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamRoomPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamRoomPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (IsRoomMaster != other.IsRoomMaster) return false;
      if (IsHasReady != other.IsHasReady) return false;
      if (Seat != other.Seat) return false;
      if (!object.Equals(Hero, other.Hero)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (IsRoomMaster != false) hash ^= IsRoomMaster.GetHashCode();
      if (IsHasReady != false) hash ^= IsHasReady.GetHashCode();
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (hero_ != null) hash ^= Hero.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (IsRoomMaster != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRoomMaster);
      }
      if (IsHasReady != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsHasReady);
      }
      if (Seat != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Seat);
      }
      if (hero_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Hero);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (IsRoomMaster != false) {
        size += 1 + 1;
      }
      if (IsHasReady != false) {
        size += 1 + 1;
      }
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (hero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamRoomPlayer other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::NetProto.PlayerInfoProto();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.IsRoomMaster != false) {
        IsRoomMaster = other.IsRoomMaster;
      }
      if (other.IsHasReady != false) {
        IsHasReady = other.IsHasReady;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      if (other.hero_ != null) {
        if (hero_ == null) {
          hero_ = new global::NetProto.HeroProto();
        }
        Hero.MergeFrom(other.Hero);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::NetProto.PlayerInfoProto();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            IsRoomMaster = input.ReadBool();
            break;
          }
          case 24: {
            IsHasReady = input.ReadBool();
            break;
          }
          case 32: {
            Seat = input.ReadInt32();
            break;
          }
          case 42: {
            if (hero_ == null) {
              hero_ = new global::NetProto.HeroProto();
            }
            input.ReadMessage(hero_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取组队房间列表
  /// </summary>
  public sealed partial class csGetTeamRoomList : pb::IMessage<csGetTeamRoomList> {
    private static readonly pb::MessageParser<csGetTeamRoomList> _parser = new pb::MessageParser<csGetTeamRoomList>(() => new csGetTeamRoomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csGetTeamRoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csGetTeamRoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csGetTeamRoomList(csGetTeamRoomList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csGetTeamRoomList Clone() {
      return new csGetTeamRoomList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csGetTeamRoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csGetTeamRoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csGetTeamRoomList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scGetTeamRoomList : pb::IMessage<scGetTeamRoomList> {
    private static readonly pb::MessageParser<scGetTeamRoomList> _parser = new pb::MessageParser<scGetTeamRoomList>(() => new scGetTeamRoomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scGetTeamRoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scGetTeamRoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scGetTeamRoomList(scGetTeamRoomList other) : this() {
      err_ = other.err_;
      teamRoomList_ = other.teamRoomList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scGetTeamRoomList Clone() {
      return new scGetTeamRoomList(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "teamRoomList" field.</summary>
    public const int TeamRoomListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NetProto.TeamRoom> _repeated_teamRoomList_codec
        = pb::FieldCodec.ForMessage(18, global::NetProto.TeamRoom.Parser);
    private readonly pbc::RepeatedField<global::NetProto.TeamRoom> teamRoomList_ = new pbc::RepeatedField<global::NetProto.TeamRoom>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.TeamRoom> TeamRoomList {
      get { return teamRoomList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scGetTeamRoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scGetTeamRoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if(!teamRoomList_.Equals(other.teamRoomList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      hash ^= teamRoomList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      teamRoomList_.WriteTo(output, _repeated_teamRoomList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      size += teamRoomList_.CalculateSize(_repeated_teamRoomList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scGetTeamRoomList other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      teamRoomList_.Add(other.teamRoomList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 18: {
            teamRoomList_.AddEntriesFrom(input, _repeated_teamRoomList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建组队房间
  /// </summary>
  public sealed partial class csCreateTeamRoom : pb::IMessage<csCreateTeamRoom> {
    private static readonly pb::MessageParser<csCreateTeamRoom> _parser = new pb::MessageParser<csCreateTeamRoom>(() => new csCreateTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csCreateTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csCreateTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csCreateTeamRoom(csCreateTeamRoom other) : this() {
      teamStageId_ = other.teamStageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csCreateTeamRoom Clone() {
      return new csCreateTeamRoom(this);
    }

    /// <summary>Field number for the "teamStageId" field.</summary>
    public const int TeamStageIdFieldNumber = 1;
    private int teamStageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamStageId {
      get { return teamStageId_; }
      set {
        teamStageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csCreateTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csCreateTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamStageId != other.TeamStageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamStageId != 0) hash ^= TeamStageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamStageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamStageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamStageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csCreateTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.TeamStageId != 0) {
        TeamStageId = other.TeamStageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamStageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scCreateTeamRoom : pb::IMessage<scCreateTeamRoom> {
    private static readonly pb::MessageParser<scCreateTeamRoom> _parser = new pb::MessageParser<scCreateTeamRoom>(() => new scCreateTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scCreateTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scCreateTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scCreateTeamRoom(scCreateTeamRoom other) : this() {
      err_ = other.err_;
      TeamRoom = other.teamRoom_ != null ? other.TeamRoom.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scCreateTeamRoom Clone() {
      return new scCreateTeamRoom(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "teamRoom" field.</summary>
    public const int TeamRoomFieldNumber = 2;
    private global::NetProto.TeamRoom teamRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TeamRoom TeamRoom {
      get { return teamRoom_; }
      set {
        teamRoom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scCreateTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scCreateTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (!object.Equals(TeamRoom, other.TeamRoom)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (teamRoom_ != null) hash ^= TeamRoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      if (teamRoom_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (teamRoom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamRoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scCreateTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.teamRoom_ != null) {
        if (teamRoom_ == null) {
          teamRoom_ = new global::NetProto.TeamRoom();
        }
        TeamRoom.MergeFrom(other.TeamRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 18: {
            if (teamRoom_ == null) {
              teamRoom_ = new global::NetProto.TeamRoom();
            }
            input.ReadMessage(teamRoom_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 离开组队房间
  /// </summary>
  public sealed partial class csLeaveTeamRoom : pb::IMessage<csLeaveTeamRoom> {
    private static readonly pb::MessageParser<csLeaveTeamRoom> _parser = new pb::MessageParser<csLeaveTeamRoom>(() => new csLeaveTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csLeaveTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csLeaveTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csLeaveTeamRoom(csLeaveTeamRoom other) : this() {
      teamRoomId_ = other.teamRoomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csLeaveTeamRoom Clone() {
      return new csLeaveTeamRoom(this);
    }

    /// <summary>Field number for the "teamRoomId" field.</summary>
    public const int TeamRoomIdFieldNumber = 1;
    private int teamRoomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamRoomId {
      get { return teamRoomId_; }
      set {
        teamRoomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csLeaveTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csLeaveTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamRoomId != other.TeamRoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamRoomId != 0) hash ^= TeamRoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamRoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamRoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamRoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csLeaveTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.TeamRoomId != 0) {
        TeamRoomId = other.TeamRoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamRoomId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scLeaveTeamRoom : pb::IMessage<scLeaveTeamRoom> {
    private static readonly pb::MessageParser<scLeaveTeamRoom> _parser = new pb::MessageParser<scLeaveTeamRoom>(() => new scLeaveTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scLeaveTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scLeaveTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scLeaveTeamRoom(scLeaveTeamRoom other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scLeaveTeamRoom Clone() {
      return new scLeaveTeamRoom(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scLeaveTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scLeaveTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scLeaveTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知房间内所有人 有人离开组队房间(如果是自己的话 , 可能是自己退出 , 也可能是被 t , 也有可能是房间关闭)
  /// </summary>
  public sealed partial class scNotifyLeaveTeamRoom : pb::IMessage<scNotifyLeaveTeamRoom> {
    private static readonly pb::MessageParser<scNotifyLeaveTeamRoom> _parser = new pb::MessageParser<scNotifyLeaveTeamRoom>(() => new scNotifyLeaveTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyLeaveTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyLeaveTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyLeaveTeamRoom(scNotifyLeaveTeamRoom other) : this() {
      playerUid_ = other.playerUid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyLeaveTeamRoom Clone() {
      return new scNotifyLeaveTeamRoom(this);
    }

    /// <summary>Field number for the "playerUid" field.</summary>
    public const int PlayerUidFieldNumber = 1;
    private int playerUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerUid {
      get { return playerUid_; }
      set {
        playerUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyLeaveTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyLeaveTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerUid != other.PlayerUid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerUid != 0) hash ^= PlayerUid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerUid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerUid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyLeaveTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.PlayerUid != 0) {
        PlayerUid = other.PlayerUid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerUid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入一个组队房间
  /// </summary>
  public sealed partial class csEnterTeamRoom : pb::IMessage<csEnterTeamRoom> {
    private static readonly pb::MessageParser<csEnterTeamRoom> _parser = new pb::MessageParser<csEnterTeamRoom>(() => new csEnterTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csEnterTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csEnterTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csEnterTeamRoom(csEnterTeamRoom other) : this() {
      teamRoomId_ = other.teamRoomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csEnterTeamRoom Clone() {
      return new csEnterTeamRoom(this);
    }

    /// <summary>Field number for the "teamRoomId" field.</summary>
    public const int TeamRoomIdFieldNumber = 1;
    private int teamRoomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamRoomId {
      get { return teamRoomId_; }
      set {
        teamRoomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csEnterTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csEnterTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamRoomId != other.TeamRoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamRoomId != 0) hash ^= TeamRoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamRoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamRoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamRoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csEnterTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.TeamRoomId != 0) {
        TeamRoomId = other.TeamRoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamRoomId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scEnterTeamRoom : pb::IMessage<scEnterTeamRoom> {
    private static readonly pb::MessageParser<scEnterTeamRoom> _parser = new pb::MessageParser<scEnterTeamRoom>(() => new scEnterTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scEnterTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scEnterTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scEnterTeamRoom(scEnterTeamRoom other) : this() {
      err_ = other.err_;
      TeamRoom = other.teamRoom_ != null ? other.TeamRoom.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scEnterTeamRoom Clone() {
      return new scEnterTeamRoom(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "teamRoom" field.</summary>
    public const int TeamRoomFieldNumber = 2;
    private global::NetProto.TeamRoom teamRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TeamRoom TeamRoom {
      get { return teamRoom_; }
      set {
        teamRoom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scEnterTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scEnterTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (!object.Equals(TeamRoom, other.TeamRoom)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (teamRoom_ != null) hash ^= TeamRoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      if (teamRoom_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (teamRoom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamRoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scEnterTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.teamRoom_ != null) {
        if (teamRoom_ == null) {
          teamRoom_ = new global::NetProto.TeamRoom();
        }
        TeamRoom.MergeFrom(other.TeamRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 18: {
            if (teamRoom_ == null) {
              teamRoom_ = new global::NetProto.TeamRoom();
            }
            input.ReadMessage(teamRoom_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知房间内所有人 有人加入组队房间
  /// </summary>
  public sealed partial class scNotifyPlayerEnterTeamRoom : pb::IMessage<scNotifyPlayerEnterTeamRoom> {
    private static readonly pb::MessageParser<scNotifyPlayerEnterTeamRoom> _parser = new pb::MessageParser<scNotifyPlayerEnterTeamRoom>(() => new scNotifyPlayerEnterTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyPlayerEnterTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlayerEnterTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlayerEnterTeamRoom(scNotifyPlayerEnterTeamRoom other) : this() {
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlayerEnterTeamRoom Clone() {
      return new scNotifyPlayerEnterTeamRoom(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::NetProto.TeamRoomPlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TeamRoomPlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyPlayerEnterTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyPlayerEnterTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyPlayerEnterTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::NetProto.TeamRoomPlayer();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::NetProto.TeamRoomPlayer();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在组队房间中玩家(房主)选择战斗关卡
  /// </summary>
  public sealed partial class csSelectTeamStageInTeamRoom : pb::IMessage<csSelectTeamStageInTeamRoom> {
    private static readonly pb::MessageParser<csSelectTeamStageInTeamRoom> _parser = new pb::MessageParser<csSelectTeamStageInTeamRoom>(() => new csSelectTeamStageInTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csSelectTeamStageInTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectTeamStageInTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectTeamStageInTeamRoom(csSelectTeamStageInTeamRoom other) : this() {
      teamStageId_ = other.teamStageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectTeamStageInTeamRoom Clone() {
      return new csSelectTeamStageInTeamRoom(this);
    }

    /// <summary>Field number for the "teamStageId" field.</summary>
    public const int TeamStageIdFieldNumber = 1;
    private int teamStageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamStageId {
      get { return teamStageId_; }
      set {
        teamStageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csSelectTeamStageInTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csSelectTeamStageInTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamStageId != other.TeamStageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamStageId != 0) hash ^= TeamStageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamStageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamStageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamStageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csSelectTeamStageInTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.TeamStageId != 0) {
        TeamStageId = other.TeamStageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamStageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scSelectTeamStageInTeamRoom : pb::IMessage<scSelectTeamStageInTeamRoom> {
    private static readonly pb::MessageParser<scSelectTeamStageInTeamRoom> _parser = new pb::MessageParser<scSelectTeamStageInTeamRoom>(() => new scSelectTeamStageInTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scSelectTeamStageInTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectTeamStageInTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectTeamStageInTeamRoom(scSelectTeamStageInTeamRoom other) : this() {
      err_ = other.err_;
      teamStageId_ = other.teamStageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectTeamStageInTeamRoom Clone() {
      return new scSelectTeamStageInTeamRoom(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "teamStageId" field.</summary>
    public const int TeamStageIdFieldNumber = 2;
    private int teamStageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamStageId {
      get { return teamStageId_; }
      set {
        teamStageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scSelectTeamStageInTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scSelectTeamStageInTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (TeamStageId != other.TeamStageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (TeamStageId != 0) hash ^= TeamStageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      if (TeamStageId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamStageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (TeamStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamStageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scSelectTeamStageInTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.TeamStageId != 0) {
        TeamStageId = other.TeamStageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 16: {
            TeamStageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知房间内所有人 更改房间信息
  /// </summary>
  public sealed partial class scNotifyChangeTeamRoomInfo : pb::IMessage<scNotifyChangeTeamRoomInfo> {
    private static readonly pb::MessageParser<scNotifyChangeTeamRoomInfo> _parser = new pb::MessageParser<scNotifyChangeTeamRoomInfo>(() => new scNotifyChangeTeamRoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyChangeTeamRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyChangeTeamRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyChangeTeamRoomInfo(scNotifyChangeTeamRoomInfo other) : this() {
      teamStageId_ = other.teamStageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyChangeTeamRoomInfo Clone() {
      return new scNotifyChangeTeamRoomInfo(this);
    }

    /// <summary>Field number for the "teamStageId" field.</summary>
    public const int TeamStageIdFieldNumber = 1;
    private int teamStageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamStageId {
      get { return teamStageId_; }
      set {
        teamStageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyChangeTeamRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyChangeTeamRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamStageId != other.TeamStageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamStageId != 0) hash ^= TeamStageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamStageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamStageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamStageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamStageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyChangeTeamRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamStageId != 0) {
        TeamStageId = other.TeamStageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamStageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在组队房间中玩家选择使用英雄
  /// </summary>
  public sealed partial class csSelectUseHeroInTeamRoom : pb::IMessage<csSelectUseHeroInTeamRoom> {
    private static readonly pb::MessageParser<csSelectUseHeroInTeamRoom> _parser = new pb::MessageParser<csSelectUseHeroInTeamRoom>(() => new csSelectUseHeroInTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csSelectUseHeroInTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectUseHeroInTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectUseHeroInTeamRoom(csSelectUseHeroInTeamRoom other) : this() {
      teamRoomId_ = other.teamRoomId_;
      heroGuid_ = other.heroGuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSelectUseHeroInTeamRoom Clone() {
      return new csSelectUseHeroInTeamRoom(this);
    }

    /// <summary>Field number for the "teamRoomId" field.</summary>
    public const int TeamRoomIdFieldNumber = 1;
    private int teamRoomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamRoomId {
      get { return teamRoomId_; }
      set {
        teamRoomId_ = value;
      }
    }

    /// <summary>Field number for the "heroGuid" field.</summary>
    public const int HeroGuidFieldNumber = 2;
    private int heroGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroGuid {
      get { return heroGuid_; }
      set {
        heroGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csSelectUseHeroInTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csSelectUseHeroInTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamRoomId != other.TeamRoomId) return false;
      if (HeroGuid != other.HeroGuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamRoomId != 0) hash ^= TeamRoomId.GetHashCode();
      if (HeroGuid != 0) hash ^= HeroGuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamRoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamRoomId);
      }
      if (HeroGuid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamRoomId);
      }
      if (HeroGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csSelectUseHeroInTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.TeamRoomId != 0) {
        TeamRoomId = other.TeamRoomId;
      }
      if (other.HeroGuid != 0) {
        HeroGuid = other.HeroGuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamRoomId = input.ReadInt32();
            break;
          }
          case 16: {
            HeroGuid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scSelectUseHeroInTeamRoom : pb::IMessage<scSelectUseHeroInTeamRoom> {
    private static readonly pb::MessageParser<scSelectUseHeroInTeamRoom> _parser = new pb::MessageParser<scSelectUseHeroInTeamRoom>(() => new scSelectUseHeroInTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scSelectUseHeroInTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectUseHeroInTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectUseHeroInTeamRoom(scSelectUseHeroInTeamRoom other) : this() {
      err_ = other.err_;
      heroGuid_ = other.heroGuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSelectUseHeroInTeamRoom Clone() {
      return new scSelectUseHeroInTeamRoom(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "heroGuid" field.</summary>
    public const int HeroGuidFieldNumber = 2;
    private int heroGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroGuid {
      get { return heroGuid_; }
      set {
        heroGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scSelectUseHeroInTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scSelectUseHeroInTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (HeroGuid != other.HeroGuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (HeroGuid != 0) hash ^= HeroGuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      if (HeroGuid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (HeroGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scSelectUseHeroInTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.HeroGuid != 0) {
        HeroGuid = other.HeroGuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 16: {
            HeroGuid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家更改准备状态
  /// </summary>
  public sealed partial class csChangeReadyStateInTeamRoom : pb::IMessage<csChangeReadyStateInTeamRoom> {
    private static readonly pb::MessageParser<csChangeReadyStateInTeamRoom> _parser = new pb::MessageParser<csChangeReadyStateInTeamRoom>(() => new csChangeReadyStateInTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csChangeReadyStateInTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csChangeReadyStateInTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csChangeReadyStateInTeamRoom(csChangeReadyStateInTeamRoom other) : this() {
      teamRoomId_ = other.teamRoomId_;
      isReady_ = other.isReady_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csChangeReadyStateInTeamRoom Clone() {
      return new csChangeReadyStateInTeamRoom(this);
    }

    /// <summary>Field number for the "teamRoomId" field.</summary>
    public const int TeamRoomIdFieldNumber = 1;
    private int teamRoomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamRoomId {
      get { return teamRoomId_; }
      set {
        teamRoomId_ = value;
      }
    }

    /// <summary>Field number for the "isReady" field.</summary>
    public const int IsReadyFieldNumber = 2;
    private bool isReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csChangeReadyStateInTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csChangeReadyStateInTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamRoomId != other.TeamRoomId) return false;
      if (IsReady != other.IsReady) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamRoomId != 0) hash ^= TeamRoomId.GetHashCode();
      if (IsReady != false) hash ^= IsReady.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamRoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TeamRoomId);
      }
      if (IsReady != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsReady);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamRoomId);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csChangeReadyStateInTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.TeamRoomId != 0) {
        TeamRoomId = other.TeamRoomId;
      }
      if (other.IsReady != false) {
        IsReady = other.IsReady;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamRoomId = input.ReadInt32();
            break;
          }
          case 16: {
            IsReady = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scChangeReadyStateInTeamRoom : pb::IMessage<scChangeReadyStateInTeamRoom> {
    private static readonly pb::MessageParser<scChangeReadyStateInTeamRoom> _parser = new pb::MessageParser<scChangeReadyStateInTeamRoom>(() => new scChangeReadyStateInTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scChangeReadyStateInTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scChangeReadyStateInTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scChangeReadyStateInTeamRoom(scChangeReadyStateInTeamRoom other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scChangeReadyStateInTeamRoom Clone() {
      return new scChangeReadyStateInTeamRoom(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scChangeReadyStateInTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scChangeReadyStateInTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scChangeReadyStateInTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知房间内所有人 有玩家更改了自己的组队状态信息
  /// </summary>
  public sealed partial class scNotifyChangePlayerInfoInTeamRoom : pb::IMessage<scNotifyChangePlayerInfoInTeamRoom> {
    private static readonly pb::MessageParser<scNotifyChangePlayerInfoInTeamRoom> _parser = new pb::MessageParser<scNotifyChangePlayerInfoInTeamRoom>(() => new scNotifyChangePlayerInfoInTeamRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyChangePlayerInfoInTeamRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyChangePlayerInfoInTeamRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyChangePlayerInfoInTeamRoom(scNotifyChangePlayerInfoInTeamRoom other) : this() {
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyChangePlayerInfoInTeamRoom Clone() {
      return new scNotifyChangePlayerInfoInTeamRoom(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::NetProto.TeamRoomPlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.TeamRoomPlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyChangePlayerInfoInTeamRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyChangePlayerInfoInTeamRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyChangePlayerInfoInTeamRoom other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::NetProto.TeamRoomPlayer();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::NetProto.TeamRoomPlayer();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 开始组队战斗(房主)
  /// </summary>
  public sealed partial class csStartTeamBattle : pb::IMessage<csStartTeamBattle> {
    private static readonly pb::MessageParser<csStartTeamBattle> _parser = new pb::MessageParser<csStartTeamBattle>(() => new csStartTeamBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csStartTeamBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csStartTeamBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csStartTeamBattle(csStartTeamBattle other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csStartTeamBattle Clone() {
      return new csStartTeamBattle(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csStartTeamBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csStartTeamBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csStartTeamBattle other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scStartTeamBattle : pb::IMessage<scStartTeamBattle> {
    private static readonly pb::MessageParser<scStartTeamBattle> _parser = new pb::MessageParser<scStartTeamBattle>(() => new scStartTeamBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scStartTeamBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.TeamReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scStartTeamBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scStartTeamBattle(scStartTeamBattle other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scStartTeamBattle Clone() {
      return new scStartTeamBattle(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scStartTeamBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scStartTeamBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scStartTeamBattle other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
