// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GS2SS.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GS2SS {

  /// <summary>Holder for reflection information generated from GS2SS.proto</summary>
  public static partial class GS2SSReflection {

    #region Descriptor
    /// <summary>File descriptor for GS2SS.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GS2SSReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtHUzJTUy5wcm90bxIFR1MyU1MaEFJlc3VsdENvZGUucHJvdG8aEUNvbWJh",
            "dFByb3RvLnByb3RvImUKFENyZWF0ZUNvbWJhdEluaXRJbmZvEhQKDGNvbWJh",
            "dFJvb21JZBgBIAEoBRI3ChFjb21iYXRJbml0UGxheWVycxgCIAMoCzIcLkdT",
            "MlNTLkNvbWJhdEluaXRQbGF5ZXJQcm90byKIAQoVQ29tYmF0SW5pdFBsYXll",
            "clByb3RvEg4KBnVzZXJJZBgBIAEoBRINCgVuZXRJZBgCIAEoBRIMCgRzZWF0",
            "GAMgASgFEgwKBHRlYW0YBCABKAUSNAoQY29tYmF0SW5pdEhlcm9lcxgFIAMo",
            "CzIaLkdTMlNTLkNvbWJhdEluaXRIZXJvUHJvdG8irgEKE0NvbWJhdEluaXRI",
            "ZXJvUHJvdG8SEAoIY29uZmlnSWQYASABKAUSKwoGc2tpbGxzGAIgAygLMhsu",
            "R1MyU1MuQ29tYmF0SW5pdFNraWxsUHJvdG8SEwoLZmluYWxBdHRhY2sYAyAB",
            "KAUSFAoMZmluYWxEZWZlbmNlGAQgASgFEhMKC2ZpbmFsSGVhbHRoGAUgASgF",
            "EhgKEGZpbmFsQWN0aW9uU3BlZWQYBiABKAUiNwoUQ29tYmF0SW5pdFNraWxs",
            "UHJvdG8SEAoIY29uZmlnSWQYASABKAUSDQoFbGV2ZWwYAiABKAUqSAoFTXNn",
            "SWQSCQoFRmlyc3QQABIKCgVCZWdpbhCAfRIeChlHUzJTU19Gcm9tQ1NfQ3Jl",
            "YXRlQ29tYmF0EIV9EggKA0VuZBDkfWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ResultCodeReflection.Descriptor, global::CombatProtoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GS2SS.MsgId), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GS2SS.CreateCombatInitInfo), global::GS2SS.CreateCombatInitInfo.Parser, new[]{ "CombatRoomId", "CombatInitPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GS2SS.CombatInitPlayerProto), global::GS2SS.CombatInitPlayerProto.Parser, new[]{ "UserId", "NetId", "Seat", "Team", "CombatInitHeroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GS2SS.CombatInitHeroProto), global::GS2SS.CombatInitHeroProto.Parser, new[]{ "ConfigId", "Skills", "FinalAttack", "FinalDefence", "FinalHealth", "FinalActionSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GS2SS.CombatInitSkillProto), global::GS2SS.CombatInitSkillProto.Parser, new[]{ "ConfigId", "Level" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgId {
    [pbr::OriginalName("First")] First = 0,
    [pbr::OriginalName("Begin")] Begin = 16000,
    [pbr::OriginalName("GS2SS_FromCS_CreateCombat")] Gs2SsFromCsCreateCombat = 16005,
    [pbr::OriginalName("End")] End = 16100,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 创建战斗初始信息
  /// </summary>
  public sealed partial class CreateCombatInitInfo : pb::IMessage<CreateCombatInitInfo> {
    private static readonly pb::MessageParser<CreateCombatInitInfo> _parser = new pb::MessageParser<CreateCombatInitInfo>(() => new CreateCombatInitInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCombatInitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GS2SS.GS2SSReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCombatInitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCombatInitInfo(CreateCombatInitInfo other) : this() {
      combatRoomId_ = other.combatRoomId_;
      combatInitPlayers_ = other.combatInitPlayers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCombatInitInfo Clone() {
      return new CreateCombatInitInfo(this);
    }

    /// <summary>Field number for the "combatRoomId" field.</summary>
    public const int CombatRoomIdFieldNumber = 1;
    private int combatRoomId_;
    /// <summary>
    /// 战斗所需的所有的初始化信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CombatRoomId {
      get { return combatRoomId_; }
      set {
        combatRoomId_ = value;
      }
    }

    /// <summary>Field number for the "combatInitPlayers" field.</summary>
    public const int CombatInitPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GS2SS.CombatInitPlayerProto> _repeated_combatInitPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::GS2SS.CombatInitPlayerProto.Parser);
    private readonly pbc::RepeatedField<global::GS2SS.CombatInitPlayerProto> combatInitPlayers_ = new pbc::RepeatedField<global::GS2SS.CombatInitPlayerProto>();
    /// <summary>
    /// int32 seat = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GS2SS.CombatInitPlayerProto> CombatInitPlayers {
      get { return combatInitPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCombatInitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCombatInitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CombatRoomId != other.CombatRoomId) return false;
      if(!combatInitPlayers_.Equals(other.combatInitPlayers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CombatRoomId != 0) hash ^= CombatRoomId.GetHashCode();
      hash ^= combatInitPlayers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CombatRoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CombatRoomId);
      }
      combatInitPlayers_.WriteTo(output, _repeated_combatInitPlayers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CombatRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CombatRoomId);
      }
      size += combatInitPlayers_.CalculateSize(_repeated_combatInitPlayers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCombatInitInfo other) {
      if (other == null) {
        return;
      }
      if (other.CombatRoomId != 0) {
        CombatRoomId = other.CombatRoomId;
      }
      combatInitPlayers_.Add(other.combatInitPlayers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CombatRoomId = input.ReadInt32();
            break;
          }
          case 18: {
            combatInitPlayers_.AddEntriesFrom(input, _repeated_combatInitPlayers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 中心服务器和战斗服务器交互
  /// </summary>
  public sealed partial class CombatInitPlayerProto : pb::IMessage<CombatInitPlayerProto> {
    private static readonly pb::MessageParser<CombatInitPlayerProto> _parser = new pb::MessageParser<CombatInitPlayerProto>(() => new CombatInitPlayerProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatInitPlayerProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GS2SS.GS2SSReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitPlayerProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitPlayerProto(CombatInitPlayerProto other) : this() {
      userId_ = other.userId_;
      netId_ = other.netId_;
      seat_ = other.seat_;
      team_ = other.team_;
      combatInitHeroes_ = other.combatInitHeroes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitPlayerProto Clone() {
      return new CombatInitPlayerProto(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "netId" field.</summary>
    public const int NetIdFieldNumber = 2;
    private int netId_;
    /// <summary>
    /// net session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetId {
      get { return netId_; }
      set {
        netId_ = value;
      }
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int SeatFieldNumber = 3;
    private int seat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Seat {
      get { return seat_; }
      set {
        seat_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 4;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "combatInitHeroes" field.</summary>
    public const int CombatInitHeroesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GS2SS.CombatInitHeroProto> _repeated_combatInitHeroes_codec
        = pb::FieldCodec.ForMessage(42, global::GS2SS.CombatInitHeroProto.Parser);
    private readonly pbc::RepeatedField<global::GS2SS.CombatInitHeroProto> combatInitHeroes_ = new pbc::RepeatedField<global::GS2SS.CombatInitHeroProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GS2SS.CombatInitHeroProto> CombatInitHeroes {
      get { return combatInitHeroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatInitPlayerProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatInitPlayerProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (NetId != other.NetId) return false;
      if (Seat != other.Seat) return false;
      if (Team != other.Team) return false;
      if(!combatInitHeroes_.Equals(other.combatInitHeroes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (NetId != 0) hash ^= NetId.GetHashCode();
      if (Seat != 0) hash ^= Seat.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      hash ^= combatInitHeroes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (NetId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NetId);
      }
      if (Seat != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Seat);
      }
      if (Team != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Team);
      }
      combatInitHeroes_.WriteTo(output, _repeated_combatInitHeroes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (NetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetId);
      }
      if (Seat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      size += combatInitHeroes_.CalculateSize(_repeated_combatInitHeroes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatInitPlayerProto other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.NetId != 0) {
        NetId = other.NetId;
      }
      if (other.Seat != 0) {
        Seat = other.Seat;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      combatInitHeroes_.Add(other.combatInitHeroes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            NetId = input.ReadInt32();
            break;
          }
          case 24: {
            Seat = input.ReadInt32();
            break;
          }
          case 32: {
            Team = input.ReadInt32();
            break;
          }
          case 42: {
            combatInitHeroes_.AddEntriesFrom(input, _repeated_combatInitHeroes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombatInitHeroProto : pb::IMessage<CombatInitHeroProto> {
    private static readonly pb::MessageParser<CombatInitHeroProto> _parser = new pb::MessageParser<CombatInitHeroProto>(() => new CombatInitHeroProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatInitHeroProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GS2SS.GS2SSReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitHeroProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitHeroProto(CombatInitHeroProto other) : this() {
      configId_ = other.configId_;
      skills_ = other.skills_.Clone();
      finalAttack_ = other.finalAttack_;
      finalDefence_ = other.finalDefence_;
      finalHealth_ = other.finalHealth_;
      finalActionSpeed_ = other.finalActionSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitHeroProto Clone() {
      return new CombatInitHeroProto(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GS2SS.CombatInitSkillProto> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(18, global::GS2SS.CombatInitSkillProto.Parser);
    private readonly pbc::RepeatedField<global::GS2SS.CombatInitSkillProto> skills_ = new pbc::RepeatedField<global::GS2SS.CombatInitSkillProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GS2SS.CombatInitSkillProto> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "finalAttack" field.</summary>
    public const int FinalAttackFieldNumber = 3;
    private int finalAttack_;
    /// <summary>
    /// 最终值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalAttack {
      get { return finalAttack_; }
      set {
        finalAttack_ = value;
      }
    }

    /// <summary>Field number for the "finalDefence" field.</summary>
    public const int FinalDefenceFieldNumber = 4;
    private int finalDefence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalDefence {
      get { return finalDefence_; }
      set {
        finalDefence_ = value;
      }
    }

    /// <summary>Field number for the "finalHealth" field.</summary>
    public const int FinalHealthFieldNumber = 5;
    private int finalHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalHealth {
      get { return finalHealth_; }
      set {
        finalHealth_ = value;
      }
    }

    /// <summary>Field number for the "finalActionSpeed" field.</summary>
    public const int FinalActionSpeedFieldNumber = 6;
    private int finalActionSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalActionSpeed {
      get { return finalActionSpeed_; }
      set {
        finalActionSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatInitHeroProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatInitHeroProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if (FinalAttack != other.FinalAttack) return false;
      if (FinalDefence != other.FinalDefence) return false;
      if (FinalHealth != other.FinalHealth) return false;
      if (FinalActionSpeed != other.FinalActionSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (FinalAttack != 0) hash ^= FinalAttack.GetHashCode();
      if (FinalDefence != 0) hash ^= FinalDefence.GetHashCode();
      if (FinalHealth != 0) hash ^= FinalHealth.GetHashCode();
      if (FinalActionSpeed != 0) hash ^= FinalActionSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (FinalAttack != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FinalAttack);
      }
      if (FinalDefence != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FinalDefence);
      }
      if (FinalHealth != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FinalHealth);
      }
      if (FinalActionSpeed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FinalActionSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (FinalAttack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalAttack);
      }
      if (FinalDefence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalDefence);
      }
      if (FinalHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalHealth);
      }
      if (FinalActionSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalActionSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatInitHeroProto other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      skills_.Add(other.skills_);
      if (other.FinalAttack != 0) {
        FinalAttack = other.FinalAttack;
      }
      if (other.FinalDefence != 0) {
        FinalDefence = other.FinalDefence;
      }
      if (other.FinalHealth != 0) {
        FinalHealth = other.FinalHealth;
      }
      if (other.FinalActionSpeed != 0) {
        FinalActionSpeed = other.FinalActionSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 18: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 24: {
            FinalAttack = input.ReadInt32();
            break;
          }
          case 32: {
            FinalDefence = input.ReadInt32();
            break;
          }
          case 40: {
            FinalHealth = input.ReadInt32();
            break;
          }
          case 48: {
            FinalActionSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombatInitSkillProto : pb::IMessage<CombatInitSkillProto> {
    private static readonly pb::MessageParser<CombatInitSkillProto> _parser = new pb::MessageParser<CombatInitSkillProto>(() => new CombatInitSkillProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatInitSkillProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GS2SS.GS2SSReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitSkillProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitSkillProto(CombatInitSkillProto other) : this() {
      configId_ = other.configId_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatInitSkillProto Clone() {
      return new CombatInitSkillProto(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatInitSkillProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatInitSkillProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatInitSkillProto other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
