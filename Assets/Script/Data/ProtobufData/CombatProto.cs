// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CombatProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from CombatProto.proto</summary>
public static partial class CombatProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for CombatProto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CombatProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFDb21iYXRQcm90by5wcm90bxoQUmVzdWx0Q29kZS5wcm90byJVChJTeW5j",
          "Q29tYmF0SW5pdEluZm8SFAoMY29tYmF0Um9vbUlkGAEgASgFEikKDWNvbWJh",
          "dFBsYXllcnMYAiADKAsyEi5Db21iYXRQbGF5ZXJQcm90byJnChFDb21iYXRQ",
          "bGF5ZXJQcm90bxIOCgZ1c2VySWQYASABKAUSDAoEc2VhdBgCIAEoBRIMCgR0",
          "ZWFtGAMgASgFEiYKDGNvbWJhdEhlcm9lcxgEIAMoCzIQLkNvbWJhdEhlcm9Q",
          "cm90byKuAQoPQ29tYmF0SGVyb1Byb3RvEhAKCGNvbmZpZ0lkGAEgASgFEgwK",
          "BGd1aWQYAiABKAUSIQoGc2tpbGxzGAMgAygLMhEuQ29tYmF0U2tpbGxQcm90",
          "bxITCgtmaW5hbEF0dGFjaxgEIAEoBRIUCgxmaW5hbERlZmVuY2UYBSABKAUS",
          "EwoLZmluYWxIZWFsdGgYBiABKAUSGAoQZmluYWxBY3Rpb25TcGVlZBgHIAEo",
          "BSIzChBDb21iYXRTa2lsbFByb3RvEhAKCGNvbmZpZ0lkGAEgASgFEg0KBWxl",
          "dmVsGAIgASgFIkEKGXJlcVBsYXllckxvYWRDb21iYXRGaW5pc2gSFAoMY29t",
          "YmF0Um9vbUlkGAEgASgFEg4KBnVzZXJJZBgCIAEoBSI2ChpyZXNwUGxheWVy",
          "TG9hZENvbWJhdEZpbmlzaBIYCgNyZXQYASABKA4yCy5SZXN1bHRDb2RlIhEK",
          "D1N5bmNDb21iYXRTdGFydCI0Cg1TeW5jQ29tYmF0RW5kEg0KBWlzV2luGAEg",
          "ASgFEhQKDGVuZW10eUF0dGFjaxgCIAEoBSIRCg9yZXFOb3JtYWxBdHRhY2si",
          "LAoQcmVzcE5vcm1hbEF0dGFjaxIYCgNyZXQYASABKA4yCy5SZXN1bHRDb2Rl",
          "ImoKGENvbWJhdEhlcm9PcGVyYXRpb25Qcm90bxISCgphY3Rpb25UeXBlGAEg",
          "ASgFEg8KB3NraWxsSWQYAiABKAUSFAoMcmVsZWFzZXJHdWlkGAMgASgFEhMK",
          "C3RhcmdldEd1aWRzGAQgAygFIkIKFFN5bmNSb3VuZEFjdGlvblN0YXJ0EhIK",
          "CnJvdW5kSW5kZXgYASABKAUSFgoOcm91bmRUb3RhbFRpbWUYAiABKAUiWgoY",
          "cmVxQ29tYmF0UGxheWVyT3BlcmF0aW9uEhIKCnJvdW5kSW5kZXgYASABKAUS",
          "KgoHaGVyb09wcxgCIAMoCzIZLkNvbWJhdEhlcm9PcGVyYXRpb25Qcm90byI1",
          "ChlyZXNwQ29tYmF0UGxheWVyT3BlcmF0aW9uEhgKA3JldBgBIAEoDjILLlJl",
          "c3VsdENvZGUiLwoMVmVjdG9yM1Byb3RvEgkKAXgYASABKAUSCQoBeRgCIAEo",
          "BRIJCgF6GAMgASgFIj4KGVN5bmNUaW1lbGluZVNlcXVlbmNlUHJvdG8SIQoF",
          "bm9kZXMYASADKAsyEi5UaW1lbGluZU5vZGVQcm90byJjChFUaW1lbGluZU5v",
          "ZGVQcm90bxINCgVmcmFtZRgBIAEoBRIRCglzdGFydFRpbWUYAiABKAUSEAoI",
          "bGFzdFRpbWUYAyABKAUSDAoEdHlwZRgEIAEoBRIMCgRkYXRhGAUgASgMImoK",
          "D01vdmVBY3Rpb25Qcm90bxIUCgxyZWxlYXNlckd1aWQYASABKAUSEAoIbGFz",
          "dFRpbWUYAiABKAUSIAoJdGFyZ2V0UG9zGAMgASgLMg0uVmVjdG9yM1Byb3Rv",
          "Eg0KBXNwZWVkGAQgASgFIoEBChRBZGRFZmZlY3RBY3Rpb25Qcm90bxIUCgx0",
          "YXJnZXRyR3VpZHMYASADKAUSEwoLZWZmZWN0UmVzSWQYAiABKAUSGgoDcG9z",
          "GAMgASgLMg0uVmVjdG9yM1Byb3RvEg4KBmRhbWFnZRgEIAEoBRISCgpjdXJy",
          "SGVhbHRoGAUgASgFIkYKGFBsYXlBbmltYXRpb25BY3Rpb25Qcm90bxITCgt0",
          "YXJnZXRyR3VpZBgBIAEoBRIVCg1hbmltYXRpb25OYW1lGAIgASgJYgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ResultCodeReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncCombatInitInfo), global::SyncCombatInitInfo.Parser, new[]{ "CombatRoomId", "CombatPlayers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CombatPlayerProto), global::CombatPlayerProto.Parser, new[]{ "UserId", "Seat", "Team", "CombatHeroes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CombatHeroProto), global::CombatHeroProto.Parser, new[]{ "ConfigId", "Guid", "Skills", "FinalAttack", "FinalDefence", "FinalHealth", "FinalActionSpeed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CombatSkillProto), global::CombatSkillProto.Parser, new[]{ "ConfigId", "Level" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::reqPlayerLoadCombatFinish), global::reqPlayerLoadCombatFinish.Parser, new[]{ "CombatRoomId", "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::respPlayerLoadCombatFinish), global::respPlayerLoadCombatFinish.Parser, new[]{ "Ret" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncCombatStart), global::SyncCombatStart.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncCombatEnd), global::SyncCombatEnd.Parser, new[]{ "IsWin", "EnemtyAttack" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::reqNormalAttack), global::reqNormalAttack.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::respNormalAttack), global::respNormalAttack.Parser, new[]{ "Ret" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CombatHeroOperationProto), global::CombatHeroOperationProto.Parser, new[]{ "ActionType", "SkillId", "ReleaserGuid", "TargetGuids" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncRoundActionStart), global::SyncRoundActionStart.Parser, new[]{ "RoundIndex", "RoundTotalTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::reqCombatPlayerOperation), global::reqCombatPlayerOperation.Parser, new[]{ "RoundIndex", "HeroOps" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::respCombatPlayerOperation), global::respCombatPlayerOperation.Parser, new[]{ "Ret" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector3Proto), global::Vector3Proto.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncTimelineSequenceProto), global::SyncTimelineSequenceProto.Parser, new[]{ "Nodes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TimelineNodeProto), global::TimelineNodeProto.Parser, new[]{ "Frame", "StartTime", "LastTime", "Type", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MoveActionProto), global::MoveActionProto.Parser, new[]{ "ReleaserGuid", "LastTime", "TargetPos", "Speed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddEffectActionProto), global::AddEffectActionProto.Parser, new[]{ "TargetrGuids", "EffectResId", "Pos", "Damage", "CurrHealth" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayAnimationActionProto), global::PlayAnimationActionProto.Parser, new[]{ "TargetrGuid", "AnimationName" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// 战斗服务器和客户端交互
/// </summary>
public sealed partial class SyncCombatInitInfo : pb::IMessage<SyncCombatInitInfo> {
  private static readonly pb::MessageParser<SyncCombatInitInfo> _parser = new pb::MessageParser<SyncCombatInitInfo>(() => new SyncCombatInitInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncCombatInitInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatInitInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatInitInfo(SyncCombatInitInfo other) : this() {
    combatRoomId_ = other.combatRoomId_;
    combatPlayers_ = other.combatPlayers_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatInitInfo Clone() {
    return new SyncCombatInitInfo(this);
  }

  /// <summary>Field number for the "combatRoomId" field.</summary>
  public const int CombatRoomIdFieldNumber = 1;
  private int combatRoomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CombatRoomId {
    get { return combatRoomId_; }
    set {
      combatRoomId_ = value;
    }
  }

  /// <summary>Field number for the "combatPlayers" field.</summary>
  public const int CombatPlayersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CombatPlayerProto> _repeated_combatPlayers_codec
      = pb::FieldCodec.ForMessage(18, global::CombatPlayerProto.Parser);
  private readonly pbc::RepeatedField<global::CombatPlayerProto> combatPlayers_ = new pbc::RepeatedField<global::CombatPlayerProto>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CombatPlayerProto> CombatPlayers {
    get { return combatPlayers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncCombatInitInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncCombatInitInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CombatRoomId != other.CombatRoomId) return false;
    if(!combatPlayers_.Equals(other.combatPlayers_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CombatRoomId != 0) hash ^= CombatRoomId.GetHashCode();
    hash ^= combatPlayers_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CombatRoomId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CombatRoomId);
    }
    combatPlayers_.WriteTo(output, _repeated_combatPlayers_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CombatRoomId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CombatRoomId);
    }
    size += combatPlayers_.CalculateSize(_repeated_combatPlayers_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncCombatInitInfo other) {
    if (other == null) {
      return;
    }
    if (other.CombatRoomId != 0) {
      CombatRoomId = other.CombatRoomId;
    }
    combatPlayers_.Add(other.combatPlayers_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CombatRoomId = input.ReadInt32();
          break;
        }
        case 18: {
          combatPlayers_.AddEntriesFrom(input, _repeated_combatPlayers_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CombatPlayerProto : pb::IMessage<CombatPlayerProto> {
  private static readonly pb::MessageParser<CombatPlayerProto> _parser = new pb::MessageParser<CombatPlayerProto>(() => new CombatPlayerProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CombatPlayerProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatPlayerProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatPlayerProto(CombatPlayerProto other) : this() {
    userId_ = other.userId_;
    seat_ = other.seat_;
    team_ = other.team_;
    combatHeroes_ = other.combatHeroes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatPlayerProto Clone() {
    return new CombatPlayerProto(this);
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "seat" field.</summary>
  public const int SeatFieldNumber = 2;
  private int seat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seat {
    get { return seat_; }
    set {
      seat_ = value;
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 3;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  /// <summary>Field number for the "combatHeroes" field.</summary>
  public const int CombatHeroesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::CombatHeroProto> _repeated_combatHeroes_codec
      = pb::FieldCodec.ForMessage(34, global::CombatHeroProto.Parser);
  private readonly pbc::RepeatedField<global::CombatHeroProto> combatHeroes_ = new pbc::RepeatedField<global::CombatHeroProto>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CombatHeroProto> CombatHeroes {
    get { return combatHeroes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CombatPlayerProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CombatPlayerProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Seat != other.Seat) return false;
    if (Team != other.Team) return false;
    if(!combatHeroes_.Equals(other.combatHeroes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Seat != 0) hash ^= Seat.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    hash ^= combatHeroes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Seat != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seat);
    }
    if (Team != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Team);
    }
    combatHeroes_.WriteTo(output, _repeated_combatHeroes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Seat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seat);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    size += combatHeroes_.CalculateSize(_repeated_combatHeroes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CombatPlayerProto other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Seat != 0) {
      Seat = other.Seat;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    combatHeroes_.Add(other.combatHeroes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          Seat = input.ReadInt32();
          break;
        }
        case 24: {
          Team = input.ReadInt32();
          break;
        }
        case 34: {
          combatHeroes_.AddEntriesFrom(input, _repeated_combatHeroes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CombatHeroProto : pb::IMessage<CombatHeroProto> {
  private static readonly pb::MessageParser<CombatHeroProto> _parser = new pb::MessageParser<CombatHeroProto>(() => new CombatHeroProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CombatHeroProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatHeroProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatHeroProto(CombatHeroProto other) : this() {
    configId_ = other.configId_;
    guid_ = other.guid_;
    skills_ = other.skills_.Clone();
    finalAttack_ = other.finalAttack_;
    finalDefence_ = other.finalDefence_;
    finalHealth_ = other.finalHealth_;
    finalActionSpeed_ = other.finalActionSpeed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatHeroProto Clone() {
    return new CombatHeroProto(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "guid" field.</summary>
  public const int GuidFieldNumber = 2;
  private int guid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Guid {
    get { return guid_; }
    set {
      guid_ = value;
    }
  }

  /// <summary>Field number for the "skills" field.</summary>
  public const int SkillsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CombatSkillProto> _repeated_skills_codec
      = pb::FieldCodec.ForMessage(26, global::CombatSkillProto.Parser);
  private readonly pbc::RepeatedField<global::CombatSkillProto> skills_ = new pbc::RepeatedField<global::CombatSkillProto>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CombatSkillProto> Skills {
    get { return skills_; }
  }

  /// <summary>Field number for the "finalAttack" field.</summary>
  public const int FinalAttackFieldNumber = 4;
  private int finalAttack_;
  /// <summary>
  /// 最终值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FinalAttack {
    get { return finalAttack_; }
    set {
      finalAttack_ = value;
    }
  }

  /// <summary>Field number for the "finalDefence" field.</summary>
  public const int FinalDefenceFieldNumber = 5;
  private int finalDefence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FinalDefence {
    get { return finalDefence_; }
    set {
      finalDefence_ = value;
    }
  }

  /// <summary>Field number for the "finalHealth" field.</summary>
  public const int FinalHealthFieldNumber = 6;
  private int finalHealth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FinalHealth {
    get { return finalHealth_; }
    set {
      finalHealth_ = value;
    }
  }

  /// <summary>Field number for the "finalActionSpeed" field.</summary>
  public const int FinalActionSpeedFieldNumber = 7;
  private int finalActionSpeed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FinalActionSpeed {
    get { return finalActionSpeed_; }
    set {
      finalActionSpeed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CombatHeroProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CombatHeroProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (Guid != other.Guid) return false;
    if(!skills_.Equals(other.skills_)) return false;
    if (FinalAttack != other.FinalAttack) return false;
    if (FinalDefence != other.FinalDefence) return false;
    if (FinalHealth != other.FinalHealth) return false;
    if (FinalActionSpeed != other.FinalActionSpeed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Guid != 0) hash ^= Guid.GetHashCode();
    hash ^= skills_.GetHashCode();
    if (FinalAttack != 0) hash ^= FinalAttack.GetHashCode();
    if (FinalDefence != 0) hash ^= FinalDefence.GetHashCode();
    if (FinalHealth != 0) hash ^= FinalHealth.GetHashCode();
    if (FinalActionSpeed != 0) hash ^= FinalActionSpeed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (Guid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Guid);
    }
    skills_.WriteTo(output, _repeated_skills_codec);
    if (FinalAttack != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(FinalAttack);
    }
    if (FinalDefence != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(FinalDefence);
    }
    if (FinalHealth != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(FinalHealth);
    }
    if (FinalActionSpeed != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(FinalActionSpeed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Guid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
    }
    size += skills_.CalculateSize(_repeated_skills_codec);
    if (FinalAttack != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalAttack);
    }
    if (FinalDefence != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalDefence);
    }
    if (FinalHealth != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalHealth);
    }
    if (FinalActionSpeed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalActionSpeed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CombatHeroProto other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Guid != 0) {
      Guid = other.Guid;
    }
    skills_.Add(other.skills_);
    if (other.FinalAttack != 0) {
      FinalAttack = other.FinalAttack;
    }
    if (other.FinalDefence != 0) {
      FinalDefence = other.FinalDefence;
    }
    if (other.FinalHealth != 0) {
      FinalHealth = other.FinalHealth;
    }
    if (other.FinalActionSpeed != 0) {
      FinalActionSpeed = other.FinalActionSpeed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          Guid = input.ReadInt32();
          break;
        }
        case 26: {
          skills_.AddEntriesFrom(input, _repeated_skills_codec);
          break;
        }
        case 32: {
          FinalAttack = input.ReadInt32();
          break;
        }
        case 40: {
          FinalDefence = input.ReadInt32();
          break;
        }
        case 48: {
          FinalHealth = input.ReadInt32();
          break;
        }
        case 56: {
          FinalActionSpeed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CombatSkillProto : pb::IMessage<CombatSkillProto> {
  private static readonly pb::MessageParser<CombatSkillProto> _parser = new pb::MessageParser<CombatSkillProto>(() => new CombatSkillProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CombatSkillProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatSkillProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatSkillProto(CombatSkillProto other) : this() {
    configId_ = other.configId_;
    level_ = other.level_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatSkillProto Clone() {
    return new CombatSkillProto(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CombatSkillProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CombatSkillProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (Level != other.Level) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CombatSkillProto other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class reqPlayerLoadCombatFinish : pb::IMessage<reqPlayerLoadCombatFinish> {
  private static readonly pb::MessageParser<reqPlayerLoadCombatFinish> _parser = new pb::MessageParser<reqPlayerLoadCombatFinish>(() => new reqPlayerLoadCombatFinish());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<reqPlayerLoadCombatFinish> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqPlayerLoadCombatFinish() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqPlayerLoadCombatFinish(reqPlayerLoadCombatFinish other) : this() {
    combatRoomId_ = other.combatRoomId_;
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqPlayerLoadCombatFinish Clone() {
    return new reqPlayerLoadCombatFinish(this);
  }

  /// <summary>Field number for the "combatRoomId" field.</summary>
  public const int CombatRoomIdFieldNumber = 1;
  private int combatRoomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CombatRoomId {
    get { return combatRoomId_; }
    set {
      combatRoomId_ = value;
    }
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 2;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as reqPlayerLoadCombatFinish);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(reqPlayerLoadCombatFinish other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CombatRoomId != other.CombatRoomId) return false;
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CombatRoomId != 0) hash ^= CombatRoomId.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CombatRoomId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CombatRoomId);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CombatRoomId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CombatRoomId);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(reqPlayerLoadCombatFinish other) {
    if (other == null) {
      return;
    }
    if (other.CombatRoomId != 0) {
      CombatRoomId = other.CombatRoomId;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CombatRoomId = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class respPlayerLoadCombatFinish : pb::IMessage<respPlayerLoadCombatFinish> {
  private static readonly pb::MessageParser<respPlayerLoadCombatFinish> _parser = new pb::MessageParser<respPlayerLoadCombatFinish>(() => new respPlayerLoadCombatFinish());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<respPlayerLoadCombatFinish> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respPlayerLoadCombatFinish() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respPlayerLoadCombatFinish(respPlayerLoadCombatFinish other) : this() {
    ret_ = other.ret_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respPlayerLoadCombatFinish Clone() {
    return new respPlayerLoadCombatFinish(this);
  }

  /// <summary>Field number for the "ret" field.</summary>
  public const int RetFieldNumber = 1;
  private global::ResultCode ret_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResultCode Ret {
    get { return ret_; }
    set {
      ret_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as respPlayerLoadCombatFinish);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(respPlayerLoadCombatFinish other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ret != other.Ret) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ret != 0) hash ^= Ret.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ret != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Ret);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ret != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(respPlayerLoadCombatFinish other) {
    if (other == null) {
      return;
    }
    if (other.Ret != 0) {
      Ret = other.Ret;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ret_ = (global::ResultCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class SyncCombatStart : pb::IMessage<SyncCombatStart> {
  private static readonly pb::MessageParser<SyncCombatStart> _parser = new pb::MessageParser<SyncCombatStart>(() => new SyncCombatStart());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncCombatStart> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatStart() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatStart(SyncCombatStart other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatStart Clone() {
    return new SyncCombatStart(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncCombatStart);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncCombatStart other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncCombatStart other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class SyncCombatEnd : pb::IMessage<SyncCombatEnd> {
  private static readonly pb::MessageParser<SyncCombatEnd> _parser = new pb::MessageParser<SyncCombatEnd>(() => new SyncCombatEnd());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncCombatEnd> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatEnd() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatEnd(SyncCombatEnd other) : this() {
    isWin_ = other.isWin_;
    enemtyAttack_ = other.enemtyAttack_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncCombatEnd Clone() {
    return new SyncCombatEnd(this);
  }

  /// <summary>Field number for the "isWin" field.</summary>
  public const int IsWinFieldNumber = 1;
  private int isWin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsWin {
    get { return isWin_; }
    set {
      isWin_ = value;
    }
  }

  /// <summary>Field number for the "enemtyAttack" field.</summary>
  public const int EnemtyAttackFieldNumber = 2;
  private int enemtyAttack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EnemtyAttack {
    get { return enemtyAttack_; }
    set {
      enemtyAttack_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncCombatEnd);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncCombatEnd other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsWin != other.IsWin) return false;
    if (EnemtyAttack != other.EnemtyAttack) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsWin != 0) hash ^= IsWin.GetHashCode();
    if (EnemtyAttack != 0) hash ^= EnemtyAttack.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsWin != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(IsWin);
    }
    if (EnemtyAttack != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(EnemtyAttack);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsWin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsWin);
    }
    if (EnemtyAttack != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemtyAttack);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncCombatEnd other) {
    if (other == null) {
      return;
    }
    if (other.IsWin != 0) {
      IsWin = other.IsWin;
    }
    if (other.EnemtyAttack != 0) {
      EnemtyAttack = other.EnemtyAttack;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          IsWin = input.ReadInt32();
          break;
        }
        case 16: {
          EnemtyAttack = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class reqNormalAttack : pb::IMessage<reqNormalAttack> {
  private static readonly pb::MessageParser<reqNormalAttack> _parser = new pb::MessageParser<reqNormalAttack>(() => new reqNormalAttack());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<reqNormalAttack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqNormalAttack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqNormalAttack(reqNormalAttack other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqNormalAttack Clone() {
    return new reqNormalAttack(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as reqNormalAttack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(reqNormalAttack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(reqNormalAttack other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class respNormalAttack : pb::IMessage<respNormalAttack> {
  private static readonly pb::MessageParser<respNormalAttack> _parser = new pb::MessageParser<respNormalAttack>(() => new respNormalAttack());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<respNormalAttack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respNormalAttack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respNormalAttack(respNormalAttack other) : this() {
    ret_ = other.ret_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respNormalAttack Clone() {
    return new respNormalAttack(this);
  }

  /// <summary>Field number for the "ret" field.</summary>
  public const int RetFieldNumber = 1;
  private global::ResultCode ret_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResultCode Ret {
    get { return ret_; }
    set {
      ret_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as respNormalAttack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(respNormalAttack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ret != other.Ret) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ret != 0) hash ^= Ret.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ret != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Ret);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ret != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(respNormalAttack other) {
    if (other == null) {
      return;
    }
    if (other.Ret != 0) {
      Ret = other.Ret;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ret_ = (global::ResultCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class CombatHeroOperationProto : pb::IMessage<CombatHeroOperationProto> {
  private static readonly pb::MessageParser<CombatHeroOperationProto> _parser = new pb::MessageParser<CombatHeroOperationProto>(() => new CombatHeroOperationProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CombatHeroOperationProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatHeroOperationProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatHeroOperationProto(CombatHeroOperationProto other) : this() {
    actionType_ = other.actionType_;
    skillId_ = other.skillId_;
    releaserGuid_ = other.releaserGuid_;
    targetGuids_ = other.targetGuids_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CombatHeroOperationProto Clone() {
    return new CombatHeroOperationProto(this);
  }

  /// <summary>Field number for the "actionType" field.</summary>
  public const int ActionTypeFieldNumber = 1;
  private int actionType_;
  /// <summary>
  /// 1 null 2 skill
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActionType {
    get { return actionType_; }
    set {
      actionType_ = value;
    }
  }

  /// <summary>Field number for the "skillId" field.</summary>
  public const int SkillIdFieldNumber = 2;
  private int skillId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillId {
    get { return skillId_; }
    set {
      skillId_ = value;
    }
  }

  /// <summary>Field number for the "releaserGuid" field.</summary>
  public const int ReleaserGuidFieldNumber = 3;
  private int releaserGuid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ReleaserGuid {
    get { return releaserGuid_; }
    set {
      releaserGuid_ = value;
    }
  }

  /// <summary>Field number for the "targetGuids" field.</summary>
  public const int TargetGuidsFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_targetGuids_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> targetGuids_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TargetGuids {
    get { return targetGuids_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CombatHeroOperationProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CombatHeroOperationProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ActionType != other.ActionType) return false;
    if (SkillId != other.SkillId) return false;
    if (ReleaserGuid != other.ReleaserGuid) return false;
    if(!targetGuids_.Equals(other.targetGuids_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ActionType != 0) hash ^= ActionType.GetHashCode();
    if (SkillId != 0) hash ^= SkillId.GetHashCode();
    if (ReleaserGuid != 0) hash ^= ReleaserGuid.GetHashCode();
    hash ^= targetGuids_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ActionType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ActionType);
    }
    if (SkillId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SkillId);
    }
    if (ReleaserGuid != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ReleaserGuid);
    }
    targetGuids_.WriteTo(output, _repeated_targetGuids_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ActionType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
    }
    if (SkillId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
    }
    if (ReleaserGuid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaserGuid);
    }
    size += targetGuids_.CalculateSize(_repeated_targetGuids_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CombatHeroOperationProto other) {
    if (other == null) {
      return;
    }
    if (other.ActionType != 0) {
      ActionType = other.ActionType;
    }
    if (other.SkillId != 0) {
      SkillId = other.SkillId;
    }
    if (other.ReleaserGuid != 0) {
      ReleaserGuid = other.ReleaserGuid;
    }
    targetGuids_.Add(other.targetGuids_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ActionType = input.ReadInt32();
          break;
        }
        case 16: {
          SkillId = input.ReadInt32();
          break;
        }
        case 24: {
          ReleaserGuid = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          targetGuids_.AddEntriesFrom(input, _repeated_targetGuids_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SyncRoundActionStart : pb::IMessage<SyncRoundActionStart> {
  private static readonly pb::MessageParser<SyncRoundActionStart> _parser = new pb::MessageParser<SyncRoundActionStart>(() => new SyncRoundActionStart());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncRoundActionStart> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncRoundActionStart() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncRoundActionStart(SyncRoundActionStart other) : this() {
    roundIndex_ = other.roundIndex_;
    roundTotalTime_ = other.roundTotalTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncRoundActionStart Clone() {
    return new SyncRoundActionStart(this);
  }

  /// <summary>Field number for the "roundIndex" field.</summary>
  public const int RoundIndexFieldNumber = 1;
  private int roundIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoundIndex {
    get { return roundIndex_; }
    set {
      roundIndex_ = value;
    }
  }

  /// <summary>Field number for the "roundTotalTime" field.</summary>
  public const int RoundTotalTimeFieldNumber = 2;
  private int roundTotalTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoundTotalTime {
    get { return roundTotalTime_; }
    set {
      roundTotalTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncRoundActionStart);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncRoundActionStart other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoundIndex != other.RoundIndex) return false;
    if (RoundTotalTime != other.RoundTotalTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoundIndex != 0) hash ^= RoundIndex.GetHashCode();
    if (RoundTotalTime != 0) hash ^= RoundTotalTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoundIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoundIndex);
    }
    if (RoundTotalTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoundTotalTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoundIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundIndex);
    }
    if (RoundTotalTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundTotalTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncRoundActionStart other) {
    if (other == null) {
      return;
    }
    if (other.RoundIndex != 0) {
      RoundIndex = other.RoundIndex;
    }
    if (other.RoundTotalTime != 0) {
      RoundTotalTime = other.RoundTotalTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoundIndex = input.ReadInt32();
          break;
        }
        case 16: {
          RoundTotalTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class reqCombatPlayerOperation : pb::IMessage<reqCombatPlayerOperation> {
  private static readonly pb::MessageParser<reqCombatPlayerOperation> _parser = new pb::MessageParser<reqCombatPlayerOperation>(() => new reqCombatPlayerOperation());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<reqCombatPlayerOperation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqCombatPlayerOperation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqCombatPlayerOperation(reqCombatPlayerOperation other) : this() {
    roundIndex_ = other.roundIndex_;
    heroOps_ = other.heroOps_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public reqCombatPlayerOperation Clone() {
    return new reqCombatPlayerOperation(this);
  }

  /// <summary>Field number for the "roundIndex" field.</summary>
  public const int RoundIndexFieldNumber = 1;
  private int roundIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoundIndex {
    get { return roundIndex_; }
    set {
      roundIndex_ = value;
    }
  }

  /// <summary>Field number for the "heroOps" field.</summary>
  public const int HeroOpsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CombatHeroOperationProto> _repeated_heroOps_codec
      = pb::FieldCodec.ForMessage(18, global::CombatHeroOperationProto.Parser);
  private readonly pbc::RepeatedField<global::CombatHeroOperationProto> heroOps_ = new pbc::RepeatedField<global::CombatHeroOperationProto>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CombatHeroOperationProto> HeroOps {
    get { return heroOps_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as reqCombatPlayerOperation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(reqCombatPlayerOperation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoundIndex != other.RoundIndex) return false;
    if(!heroOps_.Equals(other.heroOps_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoundIndex != 0) hash ^= RoundIndex.GetHashCode();
    hash ^= heroOps_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoundIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoundIndex);
    }
    heroOps_.WriteTo(output, _repeated_heroOps_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoundIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundIndex);
    }
    size += heroOps_.CalculateSize(_repeated_heroOps_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(reqCombatPlayerOperation other) {
    if (other == null) {
      return;
    }
    if (other.RoundIndex != 0) {
      RoundIndex = other.RoundIndex;
    }
    heroOps_.Add(other.heroOps_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoundIndex = input.ReadInt32();
          break;
        }
        case 18: {
          heroOps_.AddEntriesFrom(input, _repeated_heroOps_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class respCombatPlayerOperation : pb::IMessage<respCombatPlayerOperation> {
  private static readonly pb::MessageParser<respCombatPlayerOperation> _parser = new pb::MessageParser<respCombatPlayerOperation>(() => new respCombatPlayerOperation());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<respCombatPlayerOperation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respCombatPlayerOperation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respCombatPlayerOperation(respCombatPlayerOperation other) : this() {
    ret_ = other.ret_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public respCombatPlayerOperation Clone() {
    return new respCombatPlayerOperation(this);
  }

  /// <summary>Field number for the "ret" field.</summary>
  public const int RetFieldNumber = 1;
  private global::ResultCode ret_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResultCode Ret {
    get { return ret_; }
    set {
      ret_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as respCombatPlayerOperation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(respCombatPlayerOperation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ret != other.Ret) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ret != 0) hash ^= Ret.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ret != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Ret);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ret != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(respCombatPlayerOperation other) {
    if (other == null) {
      return;
    }
    if (other.Ret != 0) {
      Ret = other.Ret;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ret_ = (global::ResultCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class Vector3Proto : pb::IMessage<Vector3Proto> {
  private static readonly pb::MessageParser<Vector3Proto> _parser = new pb::MessageParser<Vector3Proto>(() => new Vector3Proto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vector3Proto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3Proto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3Proto(Vector3Proto other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3Proto Clone() {
    return new Vector3Proto(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private int x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private int y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private int z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vector3Proto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vector3Proto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0) hash ^= X.GetHashCode();
    if (Y != 0) hash ^= Y.GetHashCode();
    if (Z != 0) hash ^= Z.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(X);
    }
    if (Y != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Y);
    }
    if (Z != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Z);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
    }
    if (Y != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
    }
    if (Z != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vector3Proto other) {
    if (other == null) {
      return;
    }
    if (other.X != 0) {
      X = other.X;
    }
    if (other.Y != 0) {
      Y = other.Y;
    }
    if (other.Z != 0) {
      Z = other.Z;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          X = input.ReadInt32();
          break;
        }
        case 16: {
          Y = input.ReadInt32();
          break;
        }
        case 24: {
          Z = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SyncTimelineSequenceProto : pb::IMessage<SyncTimelineSequenceProto> {
  private static readonly pb::MessageParser<SyncTimelineSequenceProto> _parser = new pb::MessageParser<SyncTimelineSequenceProto>(() => new SyncTimelineSequenceProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncTimelineSequenceProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncTimelineSequenceProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncTimelineSequenceProto(SyncTimelineSequenceProto other) : this() {
    nodes_ = other.nodes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncTimelineSequenceProto Clone() {
    return new SyncTimelineSequenceProto(this);
  }

  /// <summary>Field number for the "nodes" field.</summary>
  public const int NodesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TimelineNodeProto> _repeated_nodes_codec
      = pb::FieldCodec.ForMessage(10, global::TimelineNodeProto.Parser);
  private readonly pbc::RepeatedField<global::TimelineNodeProto> nodes_ = new pbc::RepeatedField<global::TimelineNodeProto>();
  /// <summary>
  /// int32 frame = 1;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TimelineNodeProto> Nodes {
    get { return nodes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncTimelineSequenceProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncTimelineSequenceProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!nodes_.Equals(other.nodes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= nodes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    nodes_.WriteTo(output, _repeated_nodes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += nodes_.CalculateSize(_repeated_nodes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncTimelineSequenceProto other) {
    if (other == null) {
      return;
    }
    nodes_.Add(other.nodes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TimelineNodeProto : pb::IMessage<TimelineNodeProto> {
  private static readonly pb::MessageParser<TimelineNodeProto> _parser = new pb::MessageParser<TimelineNodeProto>(() => new TimelineNodeProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TimelineNodeProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimelineNodeProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimelineNodeProto(TimelineNodeProto other) : this() {
    frame_ = other.frame_;
    startTime_ = other.startTime_;
    lastTime_ = other.lastTime_;
    type_ = other.type_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TimelineNodeProto Clone() {
    return new TimelineNodeProto(this);
  }

  /// <summary>Field number for the "frame" field.</summary>
  public const int FrameFieldNumber = 1;
  private int frame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Frame {
    get { return frame_; }
    set {
      frame_ = value;
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 2;
  private int startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "lastTime" field.</summary>
  public const int LastTimeFieldNumber = 3;
  private int lastTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastTime {
    get { return lastTime_; }
    set {
      lastTime_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 5;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TimelineNodeProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TimelineNodeProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Frame != other.Frame) return false;
    if (StartTime != other.StartTime) return false;
    if (LastTime != other.LastTime) return false;
    if (Type != other.Type) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Frame != 0) hash ^= Frame.GetHashCode();
    if (StartTime != 0) hash ^= StartTime.GetHashCode();
    if (LastTime != 0) hash ^= LastTime.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Frame != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Frame);
    }
    if (StartTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(StartTime);
    }
    if (LastTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LastTime);
    }
    if (Type != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Type);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Frame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
    }
    if (StartTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTime);
    }
    if (LastTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TimelineNodeProto other) {
    if (other == null) {
      return;
    }
    if (other.Frame != 0) {
      Frame = other.Frame;
    }
    if (other.StartTime != 0) {
      StartTime = other.StartTime;
    }
    if (other.LastTime != 0) {
      LastTime = other.LastTime;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Frame = input.ReadInt32();
          break;
        }
        case 16: {
          StartTime = input.ReadInt32();
          break;
        }
        case 24: {
          LastTime = input.ReadInt32();
          break;
        }
        case 32: {
          Type = input.ReadInt32();
          break;
        }
        case 42: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class MoveActionProto : pb::IMessage<MoveActionProto> {
  private static readonly pb::MessageParser<MoveActionProto> _parser = new pb::MessageParser<MoveActionProto>(() => new MoveActionProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MoveActionProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MoveActionProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MoveActionProto(MoveActionProto other) : this() {
    releaserGuid_ = other.releaserGuid_;
    lastTime_ = other.lastTime_;
    TargetPos = other.targetPos_ != null ? other.TargetPos.Clone() : null;
    speed_ = other.speed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MoveActionProto Clone() {
    return new MoveActionProto(this);
  }

  /// <summary>Field number for the "releaserGuid" field.</summary>
  public const int ReleaserGuidFieldNumber = 1;
  private int releaserGuid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ReleaserGuid {
    get { return releaserGuid_; }
    set {
      releaserGuid_ = value;
    }
  }

  /// <summary>Field number for the "lastTime" field.</summary>
  public const int LastTimeFieldNumber = 2;
  private int lastTime_;
  /// <summary>
  /// * 1000
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastTime {
    get { return lastTime_; }
    set {
      lastTime_ = value;
    }
  }

  /// <summary>Field number for the "targetPos" field.</summary>
  public const int TargetPosFieldNumber = 3;
  private global::Vector3Proto targetPos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3Proto TargetPos {
    get { return targetPos_; }
    set {
      targetPos_ = value;
    }
  }

  /// <summary>Field number for the "speed" field.</summary>
  public const int SpeedFieldNumber = 4;
  private int speed_;
  /// <summary>
  /// * 1000
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Speed {
    get { return speed_; }
    set {
      speed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MoveActionProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MoveActionProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReleaserGuid != other.ReleaserGuid) return false;
    if (LastTime != other.LastTime) return false;
    if (!object.Equals(TargetPos, other.TargetPos)) return false;
    if (Speed != other.Speed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ReleaserGuid != 0) hash ^= ReleaserGuid.GetHashCode();
    if (LastTime != 0) hash ^= LastTime.GetHashCode();
    if (targetPos_ != null) hash ^= TargetPos.GetHashCode();
    if (Speed != 0) hash ^= Speed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ReleaserGuid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ReleaserGuid);
    }
    if (LastTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LastTime);
    }
    if (targetPos_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TargetPos);
    }
    if (Speed != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Speed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ReleaserGuid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaserGuid);
    }
    if (LastTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
    }
    if (targetPos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPos);
    }
    if (Speed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MoveActionProto other) {
    if (other == null) {
      return;
    }
    if (other.ReleaserGuid != 0) {
      ReleaserGuid = other.ReleaserGuid;
    }
    if (other.LastTime != 0) {
      LastTime = other.LastTime;
    }
    if (other.targetPos_ != null) {
      if (targetPos_ == null) {
        targetPos_ = new global::Vector3Proto();
      }
      TargetPos.MergeFrom(other.TargetPos);
    }
    if (other.Speed != 0) {
      Speed = other.Speed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ReleaserGuid = input.ReadInt32();
          break;
        }
        case 16: {
          LastTime = input.ReadInt32();
          break;
        }
        case 26: {
          if (targetPos_ == null) {
            targetPos_ = new global::Vector3Proto();
          }
          input.ReadMessage(targetPos_);
          break;
        }
        case 32: {
          Speed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AddEffectActionProto : pb::IMessage<AddEffectActionProto> {
  private static readonly pb::MessageParser<AddEffectActionProto> _parser = new pb::MessageParser<AddEffectActionProto>(() => new AddEffectActionProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddEffectActionProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEffectActionProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEffectActionProto(AddEffectActionProto other) : this() {
    targetrGuids_ = other.targetrGuids_.Clone();
    effectResId_ = other.effectResId_;
    Pos = other.pos_ != null ? other.Pos.Clone() : null;
    damage_ = other.damage_;
    currHealth_ = other.currHealth_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddEffectActionProto Clone() {
    return new AddEffectActionProto(this);
  }

  /// <summary>Field number for the "targetrGuids" field.</summary>
  public const int TargetrGuidsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_targetrGuids_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> targetrGuids_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TargetrGuids {
    get { return targetrGuids_; }
  }

  /// <summary>Field number for the "effectResId" field.</summary>
  public const int EffectResIdFieldNumber = 2;
  private int effectResId_;
  /// <summary>
  /// 技能效果资源 Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EffectResId {
    get { return effectResId_; }
    set {
      effectResId_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 3;
  private global::Vector3Proto pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3Proto Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "damage" field.</summary>
  public const int DamageFieldNumber = 4;
  private int damage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Damage {
    get { return damage_; }
    set {
      damage_ = value;
    }
  }

  /// <summary>Field number for the "currHealth" field.</summary>
  public const int CurrHealthFieldNumber = 5;
  private int currHealth_;
  /// <summary>
  /// 此时受伤害之后的生命值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrHealth {
    get { return currHealth_; }
    set {
      currHealth_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddEffectActionProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddEffectActionProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!targetrGuids_.Equals(other.targetrGuids_)) return false;
    if (EffectResId != other.EffectResId) return false;
    if (!object.Equals(Pos, other.Pos)) return false;
    if (Damage != other.Damage) return false;
    if (CurrHealth != other.CurrHealth) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= targetrGuids_.GetHashCode();
    if (EffectResId != 0) hash ^= EffectResId.GetHashCode();
    if (pos_ != null) hash ^= Pos.GetHashCode();
    if (Damage != 0) hash ^= Damage.GetHashCode();
    if (CurrHealth != 0) hash ^= CurrHealth.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    targetrGuids_.WriteTo(output, _repeated_targetrGuids_codec);
    if (EffectResId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(EffectResId);
    }
    if (pos_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Pos);
    }
    if (Damage != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Damage);
    }
    if (CurrHealth != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CurrHealth);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += targetrGuids_.CalculateSize(_repeated_targetrGuids_codec);
    if (EffectResId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectResId);
    }
    if (pos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
    }
    if (Damage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
    }
    if (CurrHealth != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrHealth);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddEffectActionProto other) {
    if (other == null) {
      return;
    }
    targetrGuids_.Add(other.targetrGuids_);
    if (other.EffectResId != 0) {
      EffectResId = other.EffectResId;
    }
    if (other.pos_ != null) {
      if (pos_ == null) {
        pos_ = new global::Vector3Proto();
      }
      Pos.MergeFrom(other.Pos);
    }
    if (other.Damage != 0) {
      Damage = other.Damage;
    }
    if (other.CurrHealth != 0) {
      CurrHealth = other.CurrHealth;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          targetrGuids_.AddEntriesFrom(input, _repeated_targetrGuids_codec);
          break;
        }
        case 16: {
          EffectResId = input.ReadInt32();
          break;
        }
        case 26: {
          if (pos_ == null) {
            pos_ = new global::Vector3Proto();
          }
          input.ReadMessage(pos_);
          break;
        }
        case 32: {
          Damage = input.ReadInt32();
          break;
        }
        case 40: {
          CurrHealth = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayAnimationActionProto : pb::IMessage<PlayAnimationActionProto> {
  private static readonly pb::MessageParser<PlayAnimationActionProto> _parser = new pb::MessageParser<PlayAnimationActionProto>(() => new PlayAnimationActionProto());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayAnimationActionProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CombatProtoReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayAnimationActionProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayAnimationActionProto(PlayAnimationActionProto other) : this() {
    targetrGuid_ = other.targetrGuid_;
    animationName_ = other.animationName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayAnimationActionProto Clone() {
    return new PlayAnimationActionProto(this);
  }

  /// <summary>Field number for the "targetrGuid" field.</summary>
  public const int TargetrGuidFieldNumber = 1;
  private int targetrGuid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetrGuid {
    get { return targetrGuid_; }
    set {
      targetrGuid_ = value;
    }
  }

  /// <summary>Field number for the "animationName" field.</summary>
  public const int AnimationNameFieldNumber = 2;
  private string animationName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AnimationName {
    get { return animationName_; }
    set {
      animationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayAnimationActionProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayAnimationActionProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetrGuid != other.TargetrGuid) return false;
    if (AnimationName != other.AnimationName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetrGuid != 0) hash ^= TargetrGuid.GetHashCode();
    if (AnimationName.Length != 0) hash ^= AnimationName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetrGuid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TargetrGuid);
    }
    if (AnimationName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AnimationName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetrGuid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetrGuid);
    }
    if (AnimationName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimationName);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayAnimationActionProto other) {
    if (other == null) {
      return;
    }
    if (other.TargetrGuid != 0) {
      TargetrGuid = other.TargetrGuid;
    }
    if (other.AnimationName.Length != 0) {
      AnimationName = other.AnimationName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TargetrGuid = input.ReadInt32();
          break;
        }
        case 18: {
          AnimationName = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
