// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MainTask.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetProto {

  /// <summary>Holder for reflection information generated from MainTask.proto</summary>
  public static partial class MainTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for MainTask.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MainTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5NYWluVGFzay5wcm90bxIITmV0UHJvdG8iVQoPTWFpblRhc2tDaGFwdGVy",
            "EgoKAmlkGAEgASgFEg0KBXN0YXRlGAIgASgFEicKBnN0YWdlcxgDIAMoCzIX",
            "Lk5ldFByb3RvLk1haW5UYXNrU3RhZ2UiKgoNTWFpblRhc2tTdGFnZRIKCgJp",
            "ZBgBIAEoBRINCgVzdGF0ZRgCIAEoBSIQCg5jc1N5bmNNYWluVGFzayI9Cg5z",
            "Y1N5bmNNYWluVGFzaxIrCghjaGFwdGVycxgBIAMoCzIZLk5ldFByb3RvLk1h",
            "aW5UYXNrQ2hhcHRlciI7ChVjc0ZpbmlzaE1haW5UYXNrU3RhZ2USEQoJY2hh",
            "cHRlcklkGAEgASgFEg8KB3N0YWdlSWQYAiABKAUiSAoVc2NGaW5pc2hNYWlu",
            "VGFza1N0YWdlEgsKA2VychgBIAEoBRIRCgljaGFwdGVySWQYAiABKAUSDwoH",
            "c3RhZ2VJZBgDIAEoBSJKChZjc1JlY2VpdmVNYWluVGFza1J3YXJkEgwKBHR5",
            "cGUYASABKAUSEQoJY2hhcHRlcklkGAIgASgFEg8KB3N0YWdlSWQYAyABKAUi",
            "VwoWc2NSZWNlaXZlTWFpblRhc2tSd2FyZBILCgNlcnIYASABKAUSDAoEdHlw",
            "ZRgCIAEoBRIRCgljaGFwdGVySWQYAyABKAUSDwoHc3RhZ2VJZBgEIAEoBWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.MainTaskChapter), global::NetProto.MainTaskChapter.Parser, new[]{ "Id", "State", "Stages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.MainTaskStage), global::NetProto.MainTaskStage.Parser, new[]{ "Id", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csSyncMainTask), global::NetProto.csSyncMainTask.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scSyncMainTask), global::NetProto.scSyncMainTask.Parser, new[]{ "Chapters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csFinishMainTaskStage), global::NetProto.csFinishMainTaskStage.Parser, new[]{ "ChapterId", "StageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scFinishMainTaskStage), global::NetProto.scFinishMainTaskStage.Parser, new[]{ "Err", "ChapterId", "StageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csReceiveMainTaskRward), global::NetProto.csReceiveMainTaskRward.Parser, new[]{ "Type", "ChapterId", "StageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scReceiveMainTaskRward), global::NetProto.scReceiveMainTaskRward.Parser, new[]{ "Err", "Type", "ChapterId", "StageId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MainTaskChapter : pb::IMessage<MainTaskChapter> {
    private static readonly pb::MessageParser<MainTaskChapter> _parser = new pb::MessageParser<MainTaskChapter>(() => new MainTaskChapter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainTaskChapter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.MainTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainTaskChapter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainTaskChapter(MainTaskChapter other) : this() {
      id_ = other.id_;
      state_ = other.state_;
      stages_ = other.stages_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainTaskChapter Clone() {
      return new MainTaskChapter(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    /// 0 未完成 , 1 已完成但未领取 , 2 已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "stages" field.</summary>
    public const int StagesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NetProto.MainTaskStage> _repeated_stages_codec
        = pb::FieldCodec.ForMessage(26, global::NetProto.MainTaskStage.Parser);
    private readonly pbc::RepeatedField<global::NetProto.MainTaskStage> stages_ = new pbc::RepeatedField<global::NetProto.MainTaskStage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.MainTaskStage> Stages {
      get { return stages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainTaskChapter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainTaskChapter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (State != other.State) return false;
      if(!stages_.Equals(other.stages_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= stages_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      stages_.WriteTo(output, _repeated_stages_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += stages_.CalculateSize(_repeated_stages_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainTaskChapter other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.State != 0) {
        State = other.State;
      }
      stages_.Add(other.stages_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 26: {
            stages_.AddEntriesFrom(input, _repeated_stages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainTaskStage : pb::IMessage<MainTaskStage> {
    private static readonly pb::MessageParser<MainTaskStage> _parser = new pb::MessageParser<MainTaskStage>(() => new MainTaskStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainTaskStage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.MainTaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainTaskStage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainTaskStage(MainTaskStage other) : this() {
      id_ = other.id_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainTaskStage Clone() {
      return new MainTaskStage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    /// 0 未完成 , 1 已完成但未领取 , 2 已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainTaskStage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainTaskStage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainTaskStage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class csSyncMainTask : pb::IMessage<csSyncMainTask> {
    private static readonly pb::MessageParser<csSyncMainTask> _parser = new pb::MessageParser<csSyncMainTask>(() => new csSyncMainTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csSyncMainTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.MainTaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSyncMainTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSyncMainTask(csSyncMainTask other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csSyncMainTask Clone() {
      return new csSyncMainTask(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csSyncMainTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csSyncMainTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csSyncMainTask other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scSyncMainTask : pb::IMessage<scSyncMainTask> {
    private static readonly pb::MessageParser<scSyncMainTask> _parser = new pb::MessageParser<scSyncMainTask>(() => new scSyncMainTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scSyncMainTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.MainTaskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSyncMainTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSyncMainTask(scSyncMainTask other) : this() {
      chapters_ = other.chapters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scSyncMainTask Clone() {
      return new scSyncMainTask(this);
    }

    /// <summary>Field number for the "chapters" field.</summary>
    public const int ChaptersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NetProto.MainTaskChapter> _repeated_chapters_codec
        = pb::FieldCodec.ForMessage(10, global::NetProto.MainTaskChapter.Parser);
    private readonly pbc::RepeatedField<global::NetProto.MainTaskChapter> chapters_ = new pbc::RepeatedField<global::NetProto.MainTaskChapter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.MainTaskChapter> Chapters {
      get { return chapters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scSyncMainTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scSyncMainTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chapters_.Equals(other.chapters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chapters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chapters_.WriteTo(output, _repeated_chapters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chapters_.CalculateSize(_repeated_chapters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scSyncMainTask other) {
      if (other == null) {
        return;
      }
      chapters_.Add(other.chapters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            chapters_.AddEntriesFrom(input, _repeated_chapters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class csFinishMainTaskStage : pb::IMessage<csFinishMainTaskStage> {
    private static readonly pb::MessageParser<csFinishMainTaskStage> _parser = new pb::MessageParser<csFinishMainTaskStage>(() => new csFinishMainTaskStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csFinishMainTaskStage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.MainTaskReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csFinishMainTaskStage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csFinishMainTaskStage(csFinishMainTaskStage other) : this() {
      chapterId_ = other.chapterId_;
      stageId_ = other.stageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csFinishMainTaskStage Clone() {
      return new csFinishMainTaskStage(this);
    }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    /// <summary>
    /// 主线是单机 所以只需要完成的时候客户端发送完成即可
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 2;
    private int stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csFinishMainTaskStage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csFinishMainTaskStage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterId != other.ChapterId) return false;
      if (StageId != other.StageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (StageId != 0) hash ^= StageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      if (StageId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csFinishMainTaskStage other) {
      if (other == null) {
        return;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.StageId != 0) {
        StageId = other.StageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            StageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scFinishMainTaskStage : pb::IMessage<scFinishMainTaskStage> {
    private static readonly pb::MessageParser<scFinishMainTaskStage> _parser = new pb::MessageParser<scFinishMainTaskStage>(() => new scFinishMainTaskStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scFinishMainTaskStage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.MainTaskReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scFinishMainTaskStage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scFinishMainTaskStage(scFinishMainTaskStage other) : this() {
      err_ = other.err_;
      chapterId_ = other.chapterId_;
      stageId_ = other.stageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scFinishMainTaskStage Clone() {
      return new scFinishMainTaskStage(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 2;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 3;
    private int stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scFinishMainTaskStage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scFinishMainTaskStage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (ChapterId != other.ChapterId) return false;
      if (StageId != other.StageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (StageId != 0) hash ^= StageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      if (ChapterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChapterId);
      }
      if (StageId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scFinishMainTaskStage other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.StageId != 0) {
        StageId = other.StageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 16: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 24: {
            StageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class csReceiveMainTaskRward : pb::IMessage<csReceiveMainTaskRward> {
    private static readonly pb::MessageParser<csReceiveMainTaskRward> _parser = new pb::MessageParser<csReceiveMainTaskRward>(() => new csReceiveMainTaskRward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csReceiveMainTaskRward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.MainTaskReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csReceiveMainTaskRward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csReceiveMainTaskRward(csReceiveMainTaskRward other) : this() {
      type_ = other.type_;
      chapterId_ = other.chapterId_;
      stageId_ = other.stageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csReceiveMainTaskRward Clone() {
      return new csReceiveMainTaskRward(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 0 stage ， 1 chapter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 2;
    private int chapterId_;
    /// <summary>
    /// 其实不用 这里当作校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 3;
    private int stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csReceiveMainTaskRward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csReceiveMainTaskRward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ChapterId != other.ChapterId) return false;
      if (StageId != other.StageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (StageId != 0) hash ^= StageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (ChapterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChapterId);
      }
      if (StageId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csReceiveMainTaskRward other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.StageId != 0) {
        StageId = other.StageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 24: {
            StageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scReceiveMainTaskRward : pb::IMessage<scReceiveMainTaskRward> {
    private static readonly pb::MessageParser<scReceiveMainTaskRward> _parser = new pb::MessageParser<scReceiveMainTaskRward>(() => new scReceiveMainTaskRward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scReceiveMainTaskRward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.MainTaskReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scReceiveMainTaskRward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scReceiveMainTaskRward(scReceiveMainTaskRward other) : this() {
      err_ = other.err_;
      type_ = other.type_;
      chapterId_ = other.chapterId_;
      stageId_ = other.stageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scReceiveMainTaskRward Clone() {
      return new scReceiveMainTaskRward(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 0 stage ， 1 chapter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "chapterId" field.</summary>
    public const int ChapterIdFieldNumber = 3;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "stageId" field.</summary>
    public const int StageIdFieldNumber = 4;
    private int stageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageId {
      get { return stageId_; }
      set {
        stageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scReceiveMainTaskRward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scReceiveMainTaskRward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (Type != other.Type) return false;
      if (ChapterId != other.ChapterId) return false;
      if (StageId != other.StageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ChapterId != 0) hash ^= ChapterId.GetHashCode();
      if (StageId != 0) hash ^= StageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (ChapterId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChapterId);
      }
      if (StageId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (StageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scReceiveMainTaskRward other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ChapterId != 0) {
        ChapterId = other.ChapterId;
      }
      if (other.StageId != 0) {
        StageId = other.StageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 32: {
            StageId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
