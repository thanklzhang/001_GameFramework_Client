// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GC2LS.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GC2LS {

  /// <summary>Holder for reflection information generated from GC2LS.proto</summary>
  public static partial class GC2LSReflection {

    #region Descriptor
    /// <summary>File descriptor for GC2LS.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GC2LSReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtHQzJMUy5wcm90bxIFR0MyTFMaEFJlc3VsdENvZGUucHJvdG8iMAoLcmVx",
            "QXNrTG9naW4SDwoHYWNjb3VudBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSKd",
            "AQoMcmVzcEFza0xvZ2luEhgKA2VychgBIAEoDjILLlJlc3VsdENvZGUSEQoJ",
            "aXNTdWNjZXNzGAIgASgIEhQKDGdhdGVTZXJ2ZXJJcBgDIAEoCRIWCg5nYXRl",
            "U2VydmVyUG9ydBgEIAEoBRIOCgZ1c2VySWQYBSABKAkSEwoLdXNlckFjY291",
            "bnQYBiABKAkSDQoFdG9rZW4YByABKAkqPQoFTXNnSWQSCQoFRmlyc3QQABIK",
            "CgVCZWdpbhD4VRITCg5HQzJMU19Bc2tMb2dpbhD5VRIICgNFbmQQ3FZiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ResultCodeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GC2LS.MsgId), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GC2LS.reqAskLogin), global::GC2LS.reqAskLogin.Parser, new[]{ "Account", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GC2LS.respAskLogin), global::GC2LS.respAskLogin.Parser, new[]{ "Err", "IsSuccess", "GateServerIp", "GateServerPort", "UserId", "UserAccount", "Token" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgId {
    [pbr::OriginalName("First")] First = 0,
    [pbr::OriginalName("Begin")] Begin = 11000,
    [pbr::OriginalName("GC2LS_AskLogin")] Gc2LsAskLogin = 11001,
    [pbr::OriginalName("End")] End = 11100,
  }

  #endregion

  #region Messages
  public sealed partial class reqAskLogin : pb::IMessage<reqAskLogin> {
    private static readonly pb::MessageParser<reqAskLogin> _parser = new pb::MessageParser<reqAskLogin>(() => new reqAskLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqAskLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GC2LS.GC2LSReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAskLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAskLogin(reqAskLogin other) : this() {
      account_ = other.account_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAskLogin Clone() {
      return new reqAskLogin(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqAskLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqAskLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqAskLogin other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class respAskLogin : pb::IMessage<respAskLogin> {
    private static readonly pb::MessageParser<respAskLogin> _parser = new pb::MessageParser<respAskLogin>(() => new respAskLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respAskLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GC2LS.GC2LSReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respAskLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respAskLogin(respAskLogin other) : this() {
      err_ = other.err_;
      isSuccess_ = other.isSuccess_;
      gateServerIp_ = other.gateServerIp_;
      gateServerPort_ = other.gateServerPort_;
      userId_ = other.userId_;
      userAccount_ = other.userAccount_;
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respAskLogin Clone() {
      return new respAskLogin(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private global::ResultCode err_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ResultCode Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "isSuccess" field.</summary>
    public const int IsSuccessFieldNumber = 2;
    private bool isSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "gateServerIp" field.</summary>
    public const int GateServerIpFieldNumber = 3;
    private string gateServerIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GateServerIp {
      get { return gateServerIp_; }
      set {
        gateServerIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateServerPort" field.</summary>
    public const int GateServerPortFieldNumber = 4;
    private int gateServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GateServerPort {
      get { return gateServerPort_; }
      set {
        gateServerPort_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 5;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userAccount" field.</summary>
    public const int UserAccountFieldNumber = 6;
    private string userAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAccount {
      get { return userAccount_; }
      set {
        userAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 7;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respAskLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respAskLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (IsSuccess != other.IsSuccess) return false;
      if (GateServerIp != other.GateServerIp) return false;
      if (GateServerPort != other.GateServerPort) return false;
      if (UserId != other.UserId) return false;
      if (UserAccount != other.UserAccount) return false;
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      if (GateServerIp.Length != 0) hash ^= GateServerIp.GetHashCode();
      if (GateServerPort != 0) hash ^= GateServerPort.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (UserAccount.Length != 0) hash ^= UserAccount.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Err);
      }
      if (IsSuccess != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSuccess);
      }
      if (GateServerIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GateServerIp);
      }
      if (GateServerPort != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GateServerPort);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserId);
      }
      if (UserAccount.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserAccount);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Err);
      }
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      if (GateServerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GateServerIp);
      }
      if (GateServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GateServerPort);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UserAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAccount);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respAskLogin other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      if (other.GateServerIp.Length != 0) {
        GateServerIp = other.GateServerIp;
      }
      if (other.GateServerPort != 0) {
        GateServerPort = other.GateServerPort;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.UserAccount.Length != 0) {
        UserAccount = other.UserAccount;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            err_ = (global::ResultCode) input.ReadEnum();
            break;
          }
          case 16: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 26: {
            GateServerIp = input.ReadString();
            break;
          }
          case 32: {
            GateServerPort = input.ReadInt32();
            break;
          }
          case 42: {
            UserId = input.ReadString();
            break;
          }
          case 50: {
            UserAccount = input.ReadString();
            break;
          }
          case 58: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
