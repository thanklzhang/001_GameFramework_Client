// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetProto {

  /// <summary>Holder for reflection information generated from Common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for Common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDb21tb24ucHJvdG8SCE5ldFByb3RvIicKBEl0ZW0SEAoIY29uZmlnSWQY",
            "ASABKAUSDQoFY291bnQYAiABKAUiOgoJSGVyb1Byb3RvEgwKBGd1aWQYASAB",
            "KAUSEAoIY29uZmlnSWQYAiABKAUSDQoFbGV2ZWwYAyABKAUiLwoMVmVjdG9y",
            "M1Byb3RvEgkKAXgYASABKAUSCQoBeRgCIAEoBRIJCgF6GAMgASgFIk4KD1Bs",
            "YXllckluZm9Qcm90bxILCgN1aWQYASABKAUSDAoEbmFtZRgCIAEoCRINCgVs",
            "ZXZlbBgDIAEoBRIRCglhdmF0YXJVUkwYBCABKAkiUQoQUGxheWVyQmF0dGxl",
            "QXR0chISCgphZGRlZE1heEhwGAQgASgFEhMKC2FkZGVkQXR0YWNrGAUgASgF",
            "EhQKDGFkZGVkRGVmZW5jZRgGIAEoBSIwCg1Ta2lsbEluaXRJbmZvEhAKCGNv",
            "bmZpZ0lkGAEgASgFEg0KBWxldmVsGAIgASgFIrABCg5FbnRpdHlJbml0SW5m",
            "bxIQCghjb25maWdJZBgBIAEoBRIoCgRhdHRyGAIgASgLMhouTmV0UHJvdG8u",
            "UGxheWVyQmF0dGxlQXR0chINCgVsZXZlbBgDIAEoBRITCgtwbGF5ZXJJbmRl",
            "eBgEIAEoBRIqCglza2lsbExpc3QYBSADKAsyFy5OZXRQcm90by5Ta2lsbElu",
            "aXRJbmZvEhIKCmlzSGVyb0N0cmwYBiABKAgiqgEKDlBsYXllckluaXRJbmZv",
            "EgsKA3VpZBgBIAEoBRITCgtwbGF5ZXJJbmRleBgCIAEoBRIMCgR0ZWFtGAMg",
            "ASgFEjAKDmVudGl0eUluaXRJbmZvGAQgASgLMhguTmV0UHJvdG8uRW50aXR5",
            "SW5pdEluZm8SDQoFbGV2ZWwYBSABKAUSJwoHaW5pdFBvcxgGIAEoCzIWLk5l",
            "dFByb3RvLlZlY3RvcjNQcm90byKDAQoOQXBwbHlCYXR0bGVBcmcSFAoMYmF0",
            "dGxlUm9vbUlkGAEgASgFEhUKDWJhdHRsZVRhYmxlSWQYAiABKAUSMAoOcGxh",
            "eWVySW5mb0xpc3QYAyADKAsyGC5OZXRQcm90by5QbGF5ZXJJbml0SW5mbxIS",
            "CgpmdW5jdGlvbklkGAQgASgFIjEKE1BsYXllckJhdHRsZUVuZEluZm8SCwoD",
            "dWlkGAEgASgFEg0KBWlzV2luGAIgASgFInQKEUFwcGx5QmF0dGxlRW5kQXJn",
            "Eg4KBnJvb21JZBgBIAEoBRIVCg1iYXR0bGVUYWJsZUlkGAIgASgFEjgKEXBs",
            "YXllckVuZEluZm9MaXN0GAMgAygLMh0uTmV0UHJvdG8uUGxheWVyQmF0dGxl",
            "RW5kSW5mb2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.Item), global::NetProto.Item.Parser, new[]{ "ConfigId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.HeroProto), global::NetProto.HeroProto.Parser, new[]{ "Guid", "ConfigId", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.Vector3Proto), global::NetProto.Vector3Proto.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.PlayerInfoProto), global::NetProto.PlayerInfoProto.Parser, new[]{ "Uid", "Name", "Level", "AvatarURL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.PlayerBattleAttr), global::NetProto.PlayerBattleAttr.Parser, new[]{ "AddedMaxHp", "AddedAttack", "AddedDefence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.SkillInitInfo), global::NetProto.SkillInitInfo.Parser, new[]{ "ConfigId", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.EntityInitInfo), global::NetProto.EntityInitInfo.Parser, new[]{ "ConfigId", "Attr", "Level", "PlayerIndex", "SkillList", "IsHeroCtrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.PlayerInitInfo), global::NetProto.PlayerInitInfo.Parser, new[]{ "Uid", "PlayerIndex", "Team", "EntityInitInfo", "Level", "InitPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.ApplyBattleArg), global::NetProto.ApplyBattleArg.Parser, new[]{ "BattleRoomId", "BattleTableId", "PlayerInfoList", "FunctionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.PlayerBattleEndInfo), global::NetProto.PlayerBattleEndInfo.Parser, new[]{ "Uid", "IsWin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.ApplyBattleEndArg), global::NetProto.ApplyBattleEndArg.Parser, new[]{ "RoomId", "BattleTableId", "PlayerEndInfoList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      configId_ = other.configId_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// -1 的时候代表删除物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroProto : pb::IMessage<HeroProto> {
    private static readonly pb::MessageParser<HeroProto> _parser = new pb::MessageParser<HeroProto>(() => new HeroProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProto(HeroProto other) : this() {
      guid_ = other.guid_;
      configId_ = other.configId_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProto Clone() {
      return new HeroProto(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    /// <summary>
    /// -1 表示删除英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (ConfigId != other.ConfigId) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroProto other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3Proto : pb::IMessage<Vector3Proto> {
    private static readonly pb::MessageParser<Vector3Proto> _parser = new pb::MessageParser<Vector3Proto>(() => new Vector3Proto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3Proto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto(Vector3Proto other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto Clone() {
      return new Vector3Proto(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3Proto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3Proto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3Proto other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfoProto : pb::IMessage<PlayerInfoProto> {
    private static readonly pb::MessageParser<PlayerInfoProto> _parser = new pb::MessageParser<PlayerInfoProto>(() => new PlayerInfoProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfoProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoProto(PlayerInfoProto other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      level_ = other.level_;
      avatarURL_ = other.avatarURL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoProto Clone() {
      return new PlayerInfoProto(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "avatarURL" field.</summary>
    public const int AvatarURLFieldNumber = 4;
    private string avatarURL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarURL {
      get { return avatarURL_; }
      set {
        avatarURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfoProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfoProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (AvatarURL != other.AvatarURL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (AvatarURL.Length != 0) hash ^= AvatarURL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (AvatarURL.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarURL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (AvatarURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarURL);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfoProto other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.AvatarURL.Length != 0) {
        AvatarURL = other.AvatarURL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 34: {
            AvatarURL = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// --battle---------------------------------------
  /// </summary>
  public sealed partial class PlayerBattleAttr : pb::IMessage<PlayerBattleAttr> {
    private static readonly pb::MessageParser<PlayerBattleAttr> _parser = new pb::MessageParser<PlayerBattleAttr>(() => new PlayerBattleAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBattleAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleAttr(PlayerBattleAttr other) : this() {
      addedMaxHp_ = other.addedMaxHp_;
      addedAttack_ = other.addedAttack_;
      addedDefence_ = other.addedDefence_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleAttr Clone() {
      return new PlayerBattleAttr(this);
    }

    /// <summary>Field number for the "addedMaxHp" field.</summary>
    public const int AddedMaxHpFieldNumber = 4;
    private int addedMaxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedMaxHp {
      get { return addedMaxHp_; }
      set {
        addedMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "addedAttack" field.</summary>
    public const int AddedAttackFieldNumber = 5;
    private int addedAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedAttack {
      get { return addedAttack_; }
      set {
        addedAttack_ = value;
      }
    }

    /// <summary>Field number for the "addedDefence" field.</summary>
    public const int AddedDefenceFieldNumber = 6;
    private int addedDefence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedDefence {
      get { return addedDefence_; }
      set {
        addedDefence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBattleAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBattleAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddedMaxHp != other.AddedMaxHp) return false;
      if (AddedAttack != other.AddedAttack) return false;
      if (AddedDefence != other.AddedDefence) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddedMaxHp != 0) hash ^= AddedMaxHp.GetHashCode();
      if (AddedAttack != 0) hash ^= AddedAttack.GetHashCode();
      if (AddedDefence != 0) hash ^= AddedDefence.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddedMaxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddedMaxHp);
      }
      if (AddedAttack != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AddedAttack);
      }
      if (AddedDefence != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AddedDefence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddedMaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedMaxHp);
      }
      if (AddedAttack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedAttack);
      }
      if (AddedDefence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedDefence);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBattleAttr other) {
      if (other == null) {
        return;
      }
      if (other.AddedMaxHp != 0) {
        AddedMaxHp = other.AddedMaxHp;
      }
      if (other.AddedAttack != 0) {
        AddedAttack = other.AddedAttack;
      }
      if (other.AddedDefence != 0) {
        AddedDefence = other.AddedDefence;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            AddedMaxHp = input.ReadInt32();
            break;
          }
          case 40: {
            AddedAttack = input.ReadInt32();
            break;
          }
          case 48: {
            AddedDefence = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillInitInfo : pb::IMessage<SkillInitInfo> {
    private static readonly pb::MessageParser<SkillInitInfo> _parser = new pb::MessageParser<SkillInitInfo>(() => new SkillInitInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInitInfo(SkillInitInfo other) : this() {
      configId_ = other.configId_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInitInfo Clone() {
      return new SkillInitInfo(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillInitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillInitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillInitInfo other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityInitInfo : pb::IMessage<EntityInitInfo> {
    private static readonly pb::MessageParser<EntityInitInfo> _parser = new pb::MessageParser<EntityInitInfo>(() => new EntityInitInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityInitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInitInfo(EntityInitInfo other) : this() {
      configId_ = other.configId_;
      Attr = other.attr_ != null ? other.Attr.Clone() : null;
      level_ = other.level_;
      playerIndex_ = other.playerIndex_;
      skillList_ = other.skillList_.Clone();
      isHeroCtrl_ = other.isHeroCtrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInitInfo Clone() {
      return new EntityInitInfo(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 2;
    private global::NetProto.PlayerBattleAttr attr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.PlayerBattleAttr Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "playerIndex" field.</summary>
    public const int PlayerIndexFieldNumber = 4;
    private int playerIndex_;
    /// <summary>
    /// 玩家索引 0 开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "skillList" field.</summary>
    public const int SkillListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NetProto.SkillInitInfo> _repeated_skillList_codec
        = pb::FieldCodec.ForMessage(42, global::NetProto.SkillInitInfo.Parser);
    private readonly pbc::RepeatedField<global::NetProto.SkillInitInfo> skillList_ = new pbc::RepeatedField<global::NetProto.SkillInitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.SkillInitInfo> SkillList {
      get { return skillList_; }
    }

    /// <summary>Field number for the "isHeroCtrl" field.</summary>
    public const int IsHeroCtrlFieldNumber = 6;
    private bool isHeroCtrl_;
    /// <summary>
    /// 是否是该玩家控制的英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeroCtrl {
      get { return isHeroCtrl_; }
      set {
        isHeroCtrl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityInitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityInitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      if (!object.Equals(Attr, other.Attr)) return false;
      if (Level != other.Level) return false;
      if (PlayerIndex != other.PlayerIndex) return false;
      if(!skillList_.Equals(other.skillList_)) return false;
      if (IsHeroCtrl != other.IsHeroCtrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (attr_ != null) hash ^= Attr.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      hash ^= skillList_.GetHashCode();
      if (IsHeroCtrl != false) hash ^= IsHeroCtrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (attr_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Attr);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (PlayerIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerIndex);
      }
      skillList_.WriteTo(output, _repeated_skillList_codec);
      if (IsHeroCtrl != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsHeroCtrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      size += skillList_.CalculateSize(_repeated_skillList_codec);
      if (IsHeroCtrl != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityInitInfo other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.attr_ != null) {
        if (attr_ == null) {
          attr_ = new global::NetProto.PlayerBattleAttr();
        }
        Attr.MergeFrom(other.Attr);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      skillList_.Add(other.skillList_);
      if (other.IsHeroCtrl != false) {
        IsHeroCtrl = other.IsHeroCtrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 18: {
            if (attr_ == null) {
              attr_ = new global::NetProto.PlayerBattleAttr();
            }
            input.ReadMessage(attr_);
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 42: {
            skillList_.AddEntriesFrom(input, _repeated_skillList_codec);
            break;
          }
          case 48: {
            IsHeroCtrl = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInitInfo : pb::IMessage<PlayerInitInfo> {
    private static readonly pb::MessageParser<PlayerInitInfo> _parser = new pb::MessageParser<PlayerInitInfo>(() => new PlayerInitInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInitInfo(PlayerInitInfo other) : this() {
      uid_ = other.uid_;
      playerIndex_ = other.playerIndex_;
      team_ = other.team_;
      EntityInitInfo = other.entityInitInfo_ != null ? other.EntityInitInfo.Clone() : null;
      level_ = other.level_;
      InitPos = other.initPos_ != null ? other.InitPos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInitInfo Clone() {
      return new PlayerInitInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "playerIndex" field.</summary>
    public const int PlayerIndexFieldNumber = 2;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 3;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "entityInitInfo" field.</summary>
    public const int EntityInitInfoFieldNumber = 4;
    private global::NetProto.EntityInitInfo entityInitInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.EntityInitInfo EntityInitInfo {
      get { return entityInitInfo_; }
      set {
        entityInitInfo_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "initPos" field.</summary>
    public const int InitPosFieldNumber = 6;
    private global::NetProto.Vector3Proto initPos_;
    /// <summary>
    /// 玩家控制单位初始坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto InitPos {
      get { return initPos_; }
      set {
        initPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (PlayerIndex != other.PlayerIndex) return false;
      if (Team != other.Team) return false;
      if (!object.Equals(EntityInitInfo, other.EntityInitInfo)) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(InitPos, other.InitPos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (entityInitInfo_ != null) hash ^= EntityInitInfo.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (initPos_ != null) hash ^= InitPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (PlayerIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIndex);
      }
      if (Team != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Team);
      }
      if (entityInitInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EntityInitInfo);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (initPos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InitPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (entityInitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityInitInfo);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (initPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInitInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.entityInitInfo_ != null) {
        if (entityInitInfo_ == null) {
          entityInitInfo_ = new global::NetProto.EntityInitInfo();
        }
        EntityInitInfo.MergeFrom(other.EntityInitInfo);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.initPos_ != null) {
        if (initPos_ == null) {
          initPos_ = new global::NetProto.Vector3Proto();
        }
        InitPos.MergeFrom(other.InitPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Team = input.ReadInt32();
            break;
          }
          case 34: {
            if (entityInitInfo_ == null) {
              entityInitInfo_ = new global::NetProto.EntityInitInfo();
            }
            input.ReadMessage(entityInitInfo_);
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 50: {
            if (initPos_ == null) {
              initPos_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(initPos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyBattleArg : pb::IMessage<ApplyBattleArg> {
    private static readonly pb::MessageParser<ApplyBattleArg> _parser = new pb::MessageParser<ApplyBattleArg>(() => new ApplyBattleArg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyBattleArg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyBattleArg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyBattleArg(ApplyBattleArg other) : this() {
      battleRoomId_ = other.battleRoomId_;
      battleTableId_ = other.battleTableId_;
      playerInfoList_ = other.playerInfoList_.Clone();
      functionId_ = other.functionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyBattleArg Clone() {
      return new ApplyBattleArg(this);
    }

    /// <summary>Field number for the "battleRoomId" field.</summary>
    public const int BattleRoomIdFieldNumber = 1;
    private int battleRoomId_;
    /// <summary>
    /// 运行时战斗房间的 guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleRoomId {
      get { return battleRoomId_; }
      set {
        battleRoomId_ = value;
      }
    }

    /// <summary>Field number for the "battleTableId" field.</summary>
    public const int BattleTableIdFieldNumber = 2;
    private int battleTableId_;
    /// <summary>
    /// 表格中的战斗配置 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleTableId {
      get { return battleTableId_; }
      set {
        battleTableId_ = value;
      }
    }

    /// <summary>Field number for the "playerInfoList" field.</summary>
    public const int PlayerInfoListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NetProto.PlayerInitInfo> _repeated_playerInfoList_codec
        = pb::FieldCodec.ForMessage(26, global::NetProto.PlayerInitInfo.Parser);
    private readonly pbc::RepeatedField<global::NetProto.PlayerInitInfo> playerInfoList_ = new pbc::RepeatedField<global::NetProto.PlayerInitInfo>();
    /// <summary>
    /// 玩家信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.PlayerInitInfo> PlayerInfoList {
      get { return playerInfoList_; }
    }

    /// <summary>Field number for the "functionId" field.</summary>
    public const int FunctionIdFieldNumber = 4;
    private int functionId_;
    /// <summary>
    /// 所属功能 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FunctionId {
      get { return functionId_; }
      set {
        functionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyBattleArg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyBattleArg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleRoomId != other.BattleRoomId) return false;
      if (BattleTableId != other.BattleTableId) return false;
      if(!playerInfoList_.Equals(other.playerInfoList_)) return false;
      if (FunctionId != other.FunctionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleRoomId != 0) hash ^= BattleRoomId.GetHashCode();
      if (BattleTableId != 0) hash ^= BattleTableId.GetHashCode();
      hash ^= playerInfoList_.GetHashCode();
      if (FunctionId != 0) hash ^= FunctionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleRoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleRoomId);
      }
      if (BattleTableId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BattleTableId);
      }
      playerInfoList_.WriteTo(output, _repeated_playerInfoList_codec);
      if (FunctionId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FunctionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleRoomId);
      }
      if (BattleTableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleTableId);
      }
      size += playerInfoList_.CalculateSize(_repeated_playerInfoList_codec);
      if (FunctionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FunctionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyBattleArg other) {
      if (other == null) {
        return;
      }
      if (other.BattleRoomId != 0) {
        BattleRoomId = other.BattleRoomId;
      }
      if (other.BattleTableId != 0) {
        BattleTableId = other.BattleTableId;
      }
      playerInfoList_.Add(other.playerInfoList_);
      if (other.FunctionId != 0) {
        FunctionId = other.FunctionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleRoomId = input.ReadInt32();
            break;
          }
          case 16: {
            BattleTableId = input.ReadInt32();
            break;
          }
          case 26: {
            playerInfoList_.AddEntriesFrom(input, _repeated_playerInfoList_codec);
            break;
          }
          case 32: {
            FunctionId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerBattleEndInfo : pb::IMessage<PlayerBattleEndInfo> {
    private static readonly pb::MessageParser<PlayerBattleEndInfo> _parser = new pb::MessageParser<PlayerBattleEndInfo>(() => new PlayerBattleEndInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBattleEndInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleEndInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleEndInfo(PlayerBattleEndInfo other) : this() {
      uid_ = other.uid_;
      isWin_ = other.isWin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleEndInfo Clone() {
      return new PlayerBattleEndInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 2;
    private int isWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBattleEndInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBattleEndInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (IsWin != other.IsWin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (IsWin != 0) hash ^= IsWin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (IsWin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IsWin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (IsWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsWin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBattleEndInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.IsWin != 0) {
        IsWin = other.IsWin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            IsWin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyBattleEndArg : pb::IMessage<ApplyBattleEndArg> {
    private static readonly pb::MessageParser<ApplyBattleEndArg> _parser = new pb::MessageParser<ApplyBattleEndArg>(() => new ApplyBattleEndArg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyBattleEndArg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.CommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyBattleEndArg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyBattleEndArg(ApplyBattleEndArg other) : this() {
      roomId_ = other.roomId_;
      battleTableId_ = other.battleTableId_;
      playerEndInfoList_ = other.playerEndInfoList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyBattleEndArg Clone() {
      return new ApplyBattleEndArg(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "battleTableId" field.</summary>
    public const int BattleTableIdFieldNumber = 2;
    private int battleTableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleTableId {
      get { return battleTableId_; }
      set {
        battleTableId_ = value;
      }
    }

    /// <summary>Field number for the "playerEndInfoList" field.</summary>
    public const int PlayerEndInfoListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NetProto.PlayerBattleEndInfo> _repeated_playerEndInfoList_codec
        = pb::FieldCodec.ForMessage(26, global::NetProto.PlayerBattleEndInfo.Parser);
    private readonly pbc::RepeatedField<global::NetProto.PlayerBattleEndInfo> playerEndInfoList_ = new pbc::RepeatedField<global::NetProto.PlayerBattleEndInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.PlayerBattleEndInfo> PlayerEndInfoList {
      get { return playerEndInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyBattleEndArg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyBattleEndArg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (BattleTableId != other.BattleTableId) return false;
      if(!playerEndInfoList_.Equals(other.playerEndInfoList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (BattleTableId != 0) hash ^= BattleTableId.GetHashCode();
      hash ^= playerEndInfoList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (BattleTableId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BattleTableId);
      }
      playerEndInfoList_.WriteTo(output, _repeated_playerEndInfoList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (BattleTableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleTableId);
      }
      size += playerEndInfoList_.CalculateSize(_repeated_playerEndInfoList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyBattleEndArg other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.BattleTableId != 0) {
        BattleTableId = other.BattleTableId;
      }
      playerEndInfoList_.Add(other.playerEndInfoList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 16: {
            BattleTableId = input.ReadInt32();
            break;
          }
          case 26: {
            playerEndInfoList_.AddEntriesFrom(input, _repeated_playerEndInfoList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
