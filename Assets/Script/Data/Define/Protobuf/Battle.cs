// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NetProto {

  /// <summary>Holder for reflection information generated from Battle.proto</summary>
  public static partial class BattleReflection {

    #region Descriptor
    /// <summary>File descriptor for Battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxCYXR0bGUucHJvdG8SCE5ldFByb3RvGgxDb21tb24ucHJvdG8i0wEKEUJh",
            "dHRsZUVudGl0eVByb3RvEgwKBGd1aWQYASABKAUSEAoIY29uZmlnSWQYAiAB",
            "KAUSEwoLcGxheWVySW5kZXgYAyABKAUSMQoNc2tpbGxJbml0TGlzdBgEIAMo",
            "CzIaLk5ldFByb3RvLkJhdHRsZVNraWxsUHJvdG8SKAoIcG9zaXRpb24YBSAB",
            "KAsyFi5OZXRQcm90by5WZWN0b3IzUHJvdG8SDQoFbGV2ZWwYBiABKAUSDQoF",
            "bWF4SHAYByABKAUSDgoGY3VyckhwGAggASgFIhYKFGNzTm90aWZ5Q3JlYXRl",
            "QmF0dGxlIn0KFHNjTm90aWZ5Q3JlYXRlQmF0dGxlEi4KDWJhdHRsZUluaXRB",
            "cmcYASABKAsyFy5OZXRQcm90by5CYXR0bGVJbml0QXJnEjUKE2xvY2FsQXBw",
            "bHlCYXR0bGVBcmcYAyABKAsyGC5OZXRQcm90by5BcHBseUJhdHRsZUFyZyLE",
            "AQoNQmF0dGxlSW5pdEFyZxIMCgRndWlkGAEgASgFEg8KB3RhYmxlSWQYAiAB",
            "KAUSDgoGcm9vbUlkGAMgASgFEjoKE2JhdHRsZVBsYXllckluaXRBcmcYBCAB",
            "KAsyHS5OZXRQcm90by5CYXR0bGVQbGF5ZXJJbml0QXJnEjQKDWVudGl0eUlu",
            "aXRBcmcYBSABKAsyHS5OZXRQcm90by5CYXR0bGVFbnRpdHlJbml0QXJnEhIK",
            "CmFjdGl2aXR5SWQYByABKAUiWQoRQmF0dGxlUGxheWVyUHJvdG8SEwoLcGxh",
            "eWVySW5kZXgYASABKAUSDAoEdGVhbRgCIAEoBRILCgN1aWQYAyABKAUSFAoM",
            "Y3RybEhlcm9HdWlkGAQgASgFIkYKE0JhdHRsZVBsYXllckluaXRBcmcSLwoK",
            "cGxheWVyTGlzdBgBIAMoCzIbLk5ldFByb3RvLkJhdHRsZVBsYXllclByb3Rv",
            "IhIKEEJhdHRsZU1hcEluaXRBcmciUAoTQmF0dGxlRW50aXR5SW5pdEFyZxI5",
            "ChRiYXR0bGVFbnRpdHlJbml0TGlzdBgBIAMoCzIbLk5ldFByb3RvLkJhdHRs",
            "ZUVudGl0eVByb3RvIjMKEEJhdHRsZVNraWxsUHJvdG8SEAoIY29uZmlnSWQY",
            "ASABKAUSDQoFbGV2ZWwYAiABKAUiKAoUY3NQbGF5ZXJMb2FkUHJvZ3Jlc3MS",
            "EAoIcHJvZ3Jlc3MYASABKAUiIwoUc2NQbGF5ZXJMb2FkUHJvZ3Jlc3MSCwoD",
            "ZXJyGAEgASgFIh0KG2NzTm90aWZ5QWxsUGxheWVyTG9hZEZpbmlzaCIqChtz",
            "Y05vdGlmeUFsbFBsYXllckxvYWRGaW5pc2gSCwoDZXJyGAEgASgFIhUKE2Nz",
            "QmF0dGxlUmVhZHlGaW5pc2giIgoTc2NCYXR0bGVSZWFkeUZpbmlzaBILCgNl",
            "cnIYASABKAUiFQoTY3NOb3RpZnlCYXR0bGVTdGFydCIiChNzY05vdGlmeUJh",
            "dHRsZVN0YXJ0EgsKA2VychgBIAEoBSJHCgxjc01vdmVFbnRpdHkSDAoEZ3Vp",
            "ZBgBIAEoBRIpCgl0YXJnZXRQb3MYAiABKAsyFi5OZXRQcm90by5WZWN0b3Iz",
            "UHJvdG8iGwoMc2NNb3ZlRW50aXR5EgsKA2VychgBIAEoBSJqCgpjc1VzZVNr",
            "aWxsEgwKBGd1aWQYASABKAUSDwoHc2tpbGxJZBgCIAEoBRIpCgl0YXJnZXRQ",
            "b3MYAyABKAsyFi5OZXRQcm90by5WZWN0b3IzUHJvdG8SEgoKdGFyZ2V0R3Vp",
            "ZBgEIAEoBSIZCgpzY1VzZVNraWxsEgsKA2VychgBIAEoBSIRCg9jc0NsaWVu",
            "dFBsb3RFbmQiHgoPc2NDbGllbnRQbG90RW5kEgsKA2VychgBIAEoBSJNChZz",
            "Y05vdGlmeUNyZWF0ZUVudGl0aWVzEjMKDmJhdHRsZUVudGl0aWVzGAEgAygL",
            "MhsuTmV0UHJvdG8uQmF0dGxlRW50aXR5UHJvdG8ijwEKGHNjTm90aWZ5RW50",
            "aXR5TW92ZUJ5UGF0aBIMCgRndWlkGAEgASgFEigKCHN0YXJ0UG9zGAIgASgL",
            "MhYuTmV0UHJvdG8uVmVjdG9yM1Byb3RvEigKCHBhdGhMaXN0GAMgAygLMhYu",
            "TmV0UHJvdG8uVmVjdG9yM1Byb3RvEhEKCW1vdmVTcGVlZBgEIAEoBSJOChZz",
            "Y05vdGlmeUVudGl0eVN0b3BNb3ZlEgwKBGd1aWQYASABKAUSJgoGZW5kUG9z",
            "GAIgASgLMhYuTmV0UHJvdG8uVmVjdG9yM1Byb3RvIkYKEXNjTm90aWZ5RW50",
            "aXR5RGlyEgwKBGd1aWQYASABKAUSIwoDZGlyGAIgASgLMhYuTmV0UHJvdG8u",
            "VmVjdG9yM1Byb3RvIjUKFnNjTm90aWZ5RW50aXR5VXNlU2tpbGwSDAoEZ3Vp",
            "ZBgBIAEoBRINCgVyZXNJZBgCIAEoBSKlAQoZc2NOb3RpZnlDcmVhdGVTa2ls",
            "bEVmZmVjdBIMCgRndWlkGAEgASgFEg0KBXJlc0lkGAIgASgFEigKCHBvc2l0",
            "aW9uGAMgASgLMhYuTmV0UHJvdG8uVmVjdG9yM1Byb3RvEhgKEGZvbGxvd0Vu",
            "dGl0eUd1aWQYBCABKAUSEAoIbGFzdFRpbWUYBSABKAUSFQoNaXNBdXRvRGVz",
            "dHJveRgGIAEoCCLAAQocc2NOb3RpZnlTa2lsbEVmZmVjdFN0YXJ0TW92ZRIS",
            "CgplZmZlY3RHdWlkGAEgASgFEigKCHN0YXJ0UG9zGAIgASgLMhYuTmV0UHJv",
            "dG8uVmVjdG9yM1Byb3RvEikKCXRhcmdldFBvcxgDIAEoCzIWLk5ldFByb3Rv",
            "LlZlY3RvcjNQcm90bxISCgp0YXJnZXRHdWlkGAQgASgFEhAKCGlzRm9sbG93",
            "GAUgASgIEhEKCW1vdmVTcGVlZBgGIAEoBSJHChJzY05vdGlmeUJ1ZmZVcGRh",
            "dGUSDAoEZ3VpZBgBIAEoBRIQCghsYXN0VGltZRgCIAEoBRIRCglidWZmTGF5",
            "ZXIYAyABKAUiMAoac2NOb3RpZnlTa2lsbEVmZmVjdERlc3Ryb3kSEgoKZWZm",
            "ZWN0R3VpZBgBIAEoBSI1ChZCYXR0bGVFbnRpdHlWYWx1ZVByb3RvEgwKBHR5",
            "cGUYASABKAUSDQoFdmFsdWUYAiABKAUiXwoXc2NOb3RpZnlTeW5jRW50aXR5",
            "VmFsdWUSEgoKZW50aXR5R3VpZBgBIAEoBRIwCgZ2YWx1ZXMYAiADKAsyIC5O",
            "ZXRQcm90by5CYXR0bGVFbnRpdHlWYWx1ZVByb3RvIjQKFUJhdHRsZUVudGl0",
            "eUF0dHJQcm90bxIMCgR0eXBlGAEgASgFEg0KBXZhbHVlGAIgASgFIlwKFnNj",
            "Tm90aWZ5U3luY0VudGl0eUF0dHISEgoKZW50aXR5R3VpZBgBIAEoBRIuCgVh",
            "dHRycxgCIAMoCzIfLk5ldFByb3RvLkJhdHRsZUVudGl0eUF0dHJQcm90byIo",
            "ChJzY05vdGlmeUVudGl0eURlYWQSEgoKZW50aXR5R3VpZBgBIAEoBSIkChBz",
            "Y05vdGlmeVBsYXlQbG90EhAKCHBsb3ROYW1lGAEgASgJIhEKD3NjTm90aWZ5",
            "UGxvdEVuZCI7ChpzY05vdGlmeVNldEVudGl0eVNob3dTdGF0ZRINCgVndWlk",
            "cxgBIAMoBRIOCgZpc1Nob3cYAiABKAgiQwoRc2NOb3RpZnlCYXR0bGVFbmQS",
            "DQoFaXNXaW4YASABKAUSHwoHcmV3YXJkcxgCIAMoCzIOLk5ldFByb3RvLkl0",
            "ZW0iLwoSY3NUcmFuc2l0aW9uQmF0dGxlEgsKA2NtZBgBIAEoBRIMCgRkYXRh",
            "GAIgASgMIiEKEnNjVHJhbnNpdGlvbkJhdHRsZRILCgNlcnIYASABKAUiGwoZ",
            "Y3NUcmFuc2l0aW9uQmF0dGxlMlBsYXllciI2ChlzY1RyYW5zaXRpb25CYXR0",
            "bGUyUGxheWVyEgsKA2NtZBgBIAEoBRIMCgRkYXRhGAIgASgMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NetProto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattleEntityProto), global::NetProto.BattleEntityProto.Parser, new[]{ "Guid", "ConfigId", "PlayerIndex", "SkillInitList", "Position", "Level", "MaxHp", "CurrHp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csNotifyCreateBattle), global::NetProto.csNotifyCreateBattle.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyCreateBattle), global::NetProto.scNotifyCreateBattle.Parser, new[]{ "BattleInitArg", "LocalApplyBattleArg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattleInitArg), global::NetProto.BattleInitArg.Parser, new[]{ "Guid", "TableId", "RoomId", "BattlePlayerInitArg", "EntityInitArg", "ActivityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattlePlayerProto), global::NetProto.BattlePlayerProto.Parser, new[]{ "PlayerIndex", "Team", "Uid", "CtrlHeroGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattlePlayerInitArg), global::NetProto.BattlePlayerInitArg.Parser, new[]{ "PlayerList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattleMapInitArg), global::NetProto.BattleMapInitArg.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattleEntityInitArg), global::NetProto.BattleEntityInitArg.Parser, new[]{ "BattleEntityInitList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattleSkillProto), global::NetProto.BattleSkillProto.Parser, new[]{ "ConfigId", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csPlayerLoadProgress), global::NetProto.csPlayerLoadProgress.Parser, new[]{ "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scPlayerLoadProgress), global::NetProto.scPlayerLoadProgress.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csNotifyAllPlayerLoadFinish), global::NetProto.csNotifyAllPlayerLoadFinish.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyAllPlayerLoadFinish), global::NetProto.scNotifyAllPlayerLoadFinish.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csBattleReadyFinish), global::NetProto.csBattleReadyFinish.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scBattleReadyFinish), global::NetProto.scBattleReadyFinish.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csNotifyBattleStart), global::NetProto.csNotifyBattleStart.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyBattleStart), global::NetProto.scNotifyBattleStart.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csMoveEntity), global::NetProto.csMoveEntity.Parser, new[]{ "Guid", "TargetPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scMoveEntity), global::NetProto.scMoveEntity.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csUseSkill), global::NetProto.csUseSkill.Parser, new[]{ "Guid", "SkillId", "TargetPos", "TargetGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scUseSkill), global::NetProto.scUseSkill.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csClientPlotEnd), global::NetProto.csClientPlotEnd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scClientPlotEnd), global::NetProto.scClientPlotEnd.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyCreateEntities), global::NetProto.scNotifyCreateEntities.Parser, new[]{ "BattleEntities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyEntityMoveByPath), global::NetProto.scNotifyEntityMoveByPath.Parser, new[]{ "Guid", "StartPos", "PathList", "MoveSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyEntityStopMove), global::NetProto.scNotifyEntityStopMove.Parser, new[]{ "Guid", "EndPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyEntityDir), global::NetProto.scNotifyEntityDir.Parser, new[]{ "Guid", "Dir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyEntityUseSkill), global::NetProto.scNotifyEntityUseSkill.Parser, new[]{ "Guid", "ResId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyCreateSkillEffect), global::NetProto.scNotifyCreateSkillEffect.Parser, new[]{ "Guid", "ResId", "Position", "FollowEntityGuid", "LastTime", "IsAutoDestroy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifySkillEffectStartMove), global::NetProto.scNotifySkillEffectStartMove.Parser, new[]{ "EffectGuid", "StartPos", "TargetPos", "TargetGuid", "IsFollow", "MoveSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyBuffUpdate), global::NetProto.scNotifyBuffUpdate.Parser, new[]{ "Guid", "LastTime", "BuffLayer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifySkillEffectDestroy), global::NetProto.scNotifySkillEffectDestroy.Parser, new[]{ "EffectGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattleEntityValueProto), global::NetProto.BattleEntityValueProto.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifySyncEntityValue), global::NetProto.scNotifySyncEntityValue.Parser, new[]{ "EntityGuid", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.BattleEntityAttrProto), global::NetProto.BattleEntityAttrProto.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifySyncEntityAttr), global::NetProto.scNotifySyncEntityAttr.Parser, new[]{ "EntityGuid", "Attrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyEntityDead), global::NetProto.scNotifyEntityDead.Parser, new[]{ "EntityGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyPlayPlot), global::NetProto.scNotifyPlayPlot.Parser, new[]{ "PlotName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyPlotEnd), global::NetProto.scNotifyPlotEnd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifySetEntityShowState), global::NetProto.scNotifySetEntityShowState.Parser, new[]{ "Guids", "IsShow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scNotifyBattleEnd), global::NetProto.scNotifyBattleEnd.Parser, new[]{ "IsWin", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csTransitionBattle), global::NetProto.csTransitionBattle.Parser, new[]{ "Cmd", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scTransitionBattle), global::NetProto.scTransitionBattle.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.csTransitionBattle2Player), global::NetProto.csTransitionBattle2Player.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NetProto.scTransitionBattle2Player), global::NetProto.scTransitionBattle2Player.Parser, new[]{ "Cmd", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BattleEntityProto : pb::IMessage<BattleEntityProto> {
    private static readonly pb::MessageParser<BattleEntityProto> _parser = new pb::MessageParser<BattleEntityProto>(() => new BattleEntityProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEntityProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityProto(BattleEntityProto other) : this() {
      guid_ = other.guid_;
      configId_ = other.configId_;
      playerIndex_ = other.playerIndex_;
      skillInitList_ = other.skillInitList_.Clone();
      Position = other.position_ != null ? other.Position.Clone() : null;
      level_ = other.level_;
      maxHp_ = other.maxHp_;
      currHp_ = other.currHp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityProto Clone() {
      return new BattleEntityProto(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 2;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "playerIndex" field.</summary>
    public const int PlayerIndexFieldNumber = 3;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "skillInitList" field.</summary>
    public const int SkillInitListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NetProto.BattleSkillProto> _repeated_skillInitList_codec
        = pb::FieldCodec.ForMessage(34, global::NetProto.BattleSkillProto.Parser);
    private readonly pbc::RepeatedField<global::NetProto.BattleSkillProto> skillInitList_ = new pbc::RepeatedField<global::NetProto.BattleSkillProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.BattleSkillProto> SkillInitList {
      get { return skillInitList_; }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::NetProto.Vector3Proto position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 7;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "currHp" field.</summary>
    public const int CurrHpFieldNumber = 8;
    private int currHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrHp {
      get { return currHp_; }
      set {
        currHp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEntityProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEntityProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (ConfigId != other.ConfigId) return false;
      if (PlayerIndex != other.PlayerIndex) return false;
      if(!skillInitList_.Equals(other.skillInitList_)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Level != other.Level) return false;
      if (MaxHp != other.MaxHp) return false;
      if (CurrHp != other.CurrHp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      hash ^= skillInitList_.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (CurrHp != 0) hash ^= CurrHp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigId);
      }
      if (PlayerIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerIndex);
      }
      skillInitList_.WriteTo(output, _repeated_skillInitList_codec);
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxHp);
      }
      if (CurrHp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrHp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      size += skillInitList_.CalculateSize(_repeated_skillInitList_codec);
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (CurrHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrHp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEntityProto other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      skillInitList_.Add(other.skillInitList_);
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::NetProto.Vector3Proto();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.CurrHp != 0) {
        CurrHp = other.CurrHp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 34: {
            skillInitList_.AddEntriesFrom(input, _repeated_skillInitList_codec);
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(position_);
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 64: {
            CurrHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知战斗创建
  /// </summary>
  public sealed partial class csNotifyCreateBattle : pb::IMessage<csNotifyCreateBattle> {
    private static readonly pb::MessageParser<csNotifyCreateBattle> _parser = new pb::MessageParser<csNotifyCreateBattle>(() => new csNotifyCreateBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csNotifyCreateBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyCreateBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyCreateBattle(csNotifyCreateBattle other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyCreateBattle Clone() {
      return new csNotifyCreateBattle(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csNotifyCreateBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csNotifyCreateBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csNotifyCreateBattle other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scNotifyCreateBattle : pb::IMessage<scNotifyCreateBattle> {
    private static readonly pb::MessageParser<scNotifyCreateBattle> _parser = new pb::MessageParser<scNotifyCreateBattle>(() => new scNotifyCreateBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyCreateBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateBattle(scNotifyCreateBattle other) : this() {
      BattleInitArg = other.battleInitArg_ != null ? other.BattleInitArg.Clone() : null;
      LocalApplyBattleArg = other.localApplyBattleArg_ != null ? other.LocalApplyBattleArg.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateBattle Clone() {
      return new scNotifyCreateBattle(this);
    }

    /// <summary>Field number for the "battleInitArg" field.</summary>
    public const int BattleInitArgFieldNumber = 1;
    private global::NetProto.BattleInitArg battleInitArg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BattleInitArg BattleInitArg {
      get { return battleInitArg_; }
      set {
        battleInitArg_ = value;
      }
    }

    /// <summary>Field number for the "localApplyBattleArg" field.</summary>
    public const int LocalApplyBattleArgFieldNumber = 3;
    private global::NetProto.ApplyBattleArg localApplyBattleArg_;
    /// <summary>
    /// 本地战斗的话不为空 客户端将其解析成战斗初始化参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.ApplyBattleArg LocalApplyBattleArg {
      get { return localApplyBattleArg_; }
      set {
        localApplyBattleArg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyCreateBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyCreateBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BattleInitArg, other.BattleInitArg)) return false;
      if (!object.Equals(LocalApplyBattleArg, other.LocalApplyBattleArg)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (battleInitArg_ != null) hash ^= BattleInitArg.GetHashCode();
      if (localApplyBattleArg_ != null) hash ^= LocalApplyBattleArg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (battleInitArg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BattleInitArg);
      }
      if (localApplyBattleArg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalApplyBattleArg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (battleInitArg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleInitArg);
      }
      if (localApplyBattleArg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalApplyBattleArg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyCreateBattle other) {
      if (other == null) {
        return;
      }
      if (other.battleInitArg_ != null) {
        if (battleInitArg_ == null) {
          battleInitArg_ = new global::NetProto.BattleInitArg();
        }
        BattleInitArg.MergeFrom(other.BattleInitArg);
      }
      if (other.localApplyBattleArg_ != null) {
        if (localApplyBattleArg_ == null) {
          localApplyBattleArg_ = new global::NetProto.ApplyBattleArg();
        }
        LocalApplyBattleArg.MergeFrom(other.LocalApplyBattleArg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (battleInitArg_ == null) {
              battleInitArg_ = new global::NetProto.BattleInitArg();
            }
            input.ReadMessage(battleInitArg_);
            break;
          }
          case 26: {
            if (localApplyBattleArg_ == null) {
              localApplyBattleArg_ = new global::NetProto.ApplyBattleArg();
            }
            input.ReadMessage(localApplyBattleArg_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  战斗初始化信息 ///////////////////////////////////////////////////
  /// </summary>
  public sealed partial class BattleInitArg : pb::IMessage<BattleInitArg> {
    private static readonly pb::MessageParser<BattleInitArg> _parser = new pb::MessageParser<BattleInitArg>(() => new BattleInitArg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleInitArg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitArg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitArg(BattleInitArg other) : this() {
      guid_ = other.guid_;
      tableId_ = other.tableId_;
      roomId_ = other.roomId_;
      BattlePlayerInitArg = other.battlePlayerInitArg_ != null ? other.BattlePlayerInitArg.Clone() : null;
      EntityInitArg = other.entityInitArg_ != null ? other.EntityInitArg.Clone() : null;
      activityId_ = other.activityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitArg Clone() {
      return new BattleInitArg(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    /// <summary>
    /// 战斗 guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 2;
    private int tableId_;
    /// <summary>
    /// 战斗 表配置 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private int roomId_;
    /// <summary>
    /// 战斗所属 center server 中 room id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "battlePlayerInitArg" field.</summary>
    public const int BattlePlayerInitArgFieldNumber = 4;
    private global::NetProto.BattlePlayerInitArg battlePlayerInitArg_;
    /// <summary>
    /// 所有战斗玩家的初始信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BattlePlayerInitArg BattlePlayerInitArg {
      get { return battlePlayerInitArg_; }
      set {
        battlePlayerInitArg_ = value;
      }
    }

    /// <summary>Field number for the "entityInitArg" field.</summary>
    public const int EntityInitArgFieldNumber = 5;
    private global::NetProto.BattleEntityInitArg entityInitArg_;
    /// <summary>
    /// 所有实体信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.BattleEntityInitArg EntityInitArg {
      get { return entityInitArg_; }
      set {
        entityInitArg_ = value;
      }
    }

    /// <summary>Field number for the "activityId" field.</summary>
    public const int ActivityIdFieldNumber = 7;
    private int activityId_;
    /// <summary>
    /// 地图信息(暂时不用)
    /// BattleMapInitArg mapInitArg = 6;
    /// 活动 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleInitArg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleInitArg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (TableId != other.TableId) return false;
      if (RoomId != other.RoomId) return false;
      if (!object.Equals(BattlePlayerInitArg, other.BattlePlayerInitArg)) return false;
      if (!object.Equals(EntityInitArg, other.EntityInitArg)) return false;
      if (ActivityId != other.ActivityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (TableId != 0) hash ^= TableId.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (battlePlayerInitArg_ != null) hash ^= BattlePlayerInitArg.GetHashCode();
      if (entityInitArg_ != null) hash ^= EntityInitArg.GetHashCode();
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (TableId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoomId);
      }
      if (battlePlayerInitArg_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BattlePlayerInitArg);
      }
      if (entityInitArg_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EntityInitArg);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ActivityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (battlePlayerInitArg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattlePlayerInitArg);
      }
      if (entityInitArg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityInitArg);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleInitArg other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.TableId != 0) {
        TableId = other.TableId;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.battlePlayerInitArg_ != null) {
        if (battlePlayerInitArg_ == null) {
          battlePlayerInitArg_ = new global::NetProto.BattlePlayerInitArg();
        }
        BattlePlayerInitArg.MergeFrom(other.BattlePlayerInitArg);
      }
      if (other.entityInitArg_ != null) {
        if (entityInitArg_ == null) {
          entityInitArg_ = new global::NetProto.BattleEntityInitArg();
        }
        EntityInitArg.MergeFrom(other.EntityInitArg);
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 16: {
            TableId = input.ReadInt32();
            break;
          }
          case 24: {
            RoomId = input.ReadInt32();
            break;
          }
          case 34: {
            if (battlePlayerInitArg_ == null) {
              battlePlayerInitArg_ = new global::NetProto.BattlePlayerInitArg();
            }
            input.ReadMessage(battlePlayerInitArg_);
            break;
          }
          case 42: {
            if (entityInitArg_ == null) {
              entityInitArg_ = new global::NetProto.BattleEntityInitArg();
            }
            input.ReadMessage(entityInitArg_);
            break;
          }
          case 56: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattlePlayerProto : pb::IMessage<BattlePlayerProto> {
    private static readonly pb::MessageParser<BattlePlayerProto> _parser = new pb::MessageParser<BattlePlayerProto>(() => new BattlePlayerProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePlayerProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerProto(BattlePlayerProto other) : this() {
      playerIndex_ = other.playerIndex_;
      team_ = other.team_;
      uid_ = other.uid_;
      ctrlHeroGuid_ = other.ctrlHeroGuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerProto Clone() {
      return new BattlePlayerProto(this);
    }

    /// <summary>Field number for the "playerIndex" field.</summary>
    public const int PlayerIndexFieldNumber = 1;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "ctrlHeroGuid" field.</summary>
    public const int CtrlHeroGuidFieldNumber = 4;
    private int ctrlHeroGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CtrlHeroGuid {
      get { return ctrlHeroGuid_; }
      set {
        ctrlHeroGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattlePlayerProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattlePlayerProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIndex != other.PlayerIndex) return false;
      if (Team != other.Team) return false;
      if (Uid != other.Uid) return false;
      if (CtrlHeroGuid != other.CtrlHeroGuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (CtrlHeroGuid != 0) hash ^= CtrlHeroGuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIndex);
      }
      if (Team != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Team);
      }
      if (Uid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Uid);
      }
      if (CtrlHeroGuid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CtrlHeroGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (CtrlHeroGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CtrlHeroGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattlePlayerProto other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.CtrlHeroGuid != 0) {
        CtrlHeroGuid = other.CtrlHeroGuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Team = input.ReadInt32();
            break;
          }
          case 24: {
            Uid = input.ReadInt32();
            break;
          }
          case 32: {
            CtrlHeroGuid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattlePlayerInitArg : pb::IMessage<BattlePlayerInitArg> {
    private static readonly pb::MessageParser<BattlePlayerInitArg> _parser = new pb::MessageParser<BattlePlayerInitArg>(() => new BattlePlayerInitArg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePlayerInitArg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerInitArg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerInitArg(BattlePlayerInitArg other) : this() {
      playerList_ = other.playerList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerInitArg Clone() {
      return new BattlePlayerInitArg(this);
    }

    /// <summary>Field number for the "playerList" field.</summary>
    public const int PlayerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NetProto.BattlePlayerProto> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(10, global::NetProto.BattlePlayerProto.Parser);
    private readonly pbc::RepeatedField<global::NetProto.BattlePlayerProto> playerList_ = new pbc::RepeatedField<global::NetProto.BattlePlayerProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.BattlePlayerProto> PlayerList {
      get { return playerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattlePlayerInitArg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattlePlayerInitArg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerList_.Equals(other.playerList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerList_.WriteTo(output, _repeated_playerList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattlePlayerInitArg other) {
      if (other == null) {
        return;
      }
      playerList_.Add(other.playerList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleMapInitArg : pb::IMessage<BattleMapInitArg> {
    private static readonly pb::MessageParser<BattleMapInitArg> _parser = new pb::MessageParser<BattleMapInitArg>(() => new BattleMapInitArg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleMapInitArg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapInitArg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapInitArg(BattleMapInitArg other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleMapInitArg Clone() {
      return new BattleMapInitArg(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleMapInitArg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleMapInitArg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleMapInitArg other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BattleEntityInitArg : pb::IMessage<BattleEntityInitArg> {
    private static readonly pb::MessageParser<BattleEntityInitArg> _parser = new pb::MessageParser<BattleEntityInitArg>(() => new BattleEntityInitArg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEntityInitArg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityInitArg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityInitArg(BattleEntityInitArg other) : this() {
      battleEntityInitList_ = other.battleEntityInitList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityInitArg Clone() {
      return new BattleEntityInitArg(this);
    }

    /// <summary>Field number for the "battleEntityInitList" field.</summary>
    public const int BattleEntityInitListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NetProto.BattleEntityProto> _repeated_battleEntityInitList_codec
        = pb::FieldCodec.ForMessage(10, global::NetProto.BattleEntityProto.Parser);
    private readonly pbc::RepeatedField<global::NetProto.BattleEntityProto> battleEntityInitList_ = new pbc::RepeatedField<global::NetProto.BattleEntityProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.BattleEntityProto> BattleEntityInitList {
      get { return battleEntityInitList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEntityInitArg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEntityInitArg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!battleEntityInitList_.Equals(other.battleEntityInitList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= battleEntityInitList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      battleEntityInitList_.WriteTo(output, _repeated_battleEntityInitList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += battleEntityInitList_.CalculateSize(_repeated_battleEntityInitList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEntityInitArg other) {
      if (other == null) {
        return;
      }
      battleEntityInitList_.Add(other.battleEntityInitList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            battleEntityInitList_.AddEntriesFrom(input, _repeated_battleEntityInitList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleSkillProto : pb::IMessage<BattleSkillProto> {
    private static readonly pb::MessageParser<BattleSkillProto> _parser = new pb::MessageParser<BattleSkillProto>(() => new BattleSkillProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSkillProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSkillProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSkillProto(BattleSkillProto other) : this() {
      configId_ = other.configId_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSkillProto Clone() {
      return new BattleSkillProto(this);
    }

    /// <summary>Field number for the "configId" field.</summary>
    public const int ConfigIdFieldNumber = 1;
    private int configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSkillProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSkillProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigId != other.ConfigId) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSkillProto other) {
      if (other == null) {
        return;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfigId = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 上报自己加载进度 理论上应该是异步消息 只是通知下进度
  /// </summary>
  public sealed partial class csPlayerLoadProgress : pb::IMessage<csPlayerLoadProgress> {
    private static readonly pb::MessageParser<csPlayerLoadProgress> _parser = new pb::MessageParser<csPlayerLoadProgress>(() => new csPlayerLoadProgress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csPlayerLoadProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csPlayerLoadProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csPlayerLoadProgress(csPlayerLoadProgress other) : this() {
      progress_ = other.progress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csPlayerLoadProgress Clone() {
      return new csPlayerLoadProgress(this);
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 1;
    private int progress_;
    /// <summary>
    /// 进度 千分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csPlayerLoadProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csPlayerLoadProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Progress != other.Progress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Progress != 0) hash ^= Progress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csPlayerLoadProgress other) {
      if (other == null) {
        return;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scPlayerLoadProgress : pb::IMessage<scPlayerLoadProgress> {
    private static readonly pb::MessageParser<scPlayerLoadProgress> _parser = new pb::MessageParser<scPlayerLoadProgress>(() => new scPlayerLoadProgress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scPlayerLoadProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scPlayerLoadProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scPlayerLoadProgress(scPlayerLoadProgress other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scPlayerLoadProgress Clone() {
      return new scPlayerLoadProgress(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scPlayerLoadProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scPlayerLoadProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scPlayerLoadProgress other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 所有人加载好了
  /// </summary>
  public sealed partial class csNotifyAllPlayerLoadFinish : pb::IMessage<csNotifyAllPlayerLoadFinish> {
    private static readonly pb::MessageParser<csNotifyAllPlayerLoadFinish> _parser = new pb::MessageParser<csNotifyAllPlayerLoadFinish>(() => new csNotifyAllPlayerLoadFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csNotifyAllPlayerLoadFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyAllPlayerLoadFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyAllPlayerLoadFinish(csNotifyAllPlayerLoadFinish other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyAllPlayerLoadFinish Clone() {
      return new csNotifyAllPlayerLoadFinish(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csNotifyAllPlayerLoadFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csNotifyAllPlayerLoadFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csNotifyAllPlayerLoadFinish other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scNotifyAllPlayerLoadFinish : pb::IMessage<scNotifyAllPlayerLoadFinish> {
    private static readonly pb::MessageParser<scNotifyAllPlayerLoadFinish> _parser = new pb::MessageParser<scNotifyAllPlayerLoadFinish>(() => new scNotifyAllPlayerLoadFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyAllPlayerLoadFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyAllPlayerLoadFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyAllPlayerLoadFinish(scNotifyAllPlayerLoadFinish other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyAllPlayerLoadFinish Clone() {
      return new scNotifyAllPlayerLoadFinish(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyAllPlayerLoadFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyAllPlayerLoadFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyAllPlayerLoadFinish other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战前准备完成
  /// </summary>
  public sealed partial class csBattleReadyFinish : pb::IMessage<csBattleReadyFinish> {
    private static readonly pb::MessageParser<csBattleReadyFinish> _parser = new pb::MessageParser<csBattleReadyFinish>(() => new csBattleReadyFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csBattleReadyFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csBattleReadyFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csBattleReadyFinish(csBattleReadyFinish other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csBattleReadyFinish Clone() {
      return new csBattleReadyFinish(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csBattleReadyFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csBattleReadyFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csBattleReadyFinish other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scBattleReadyFinish : pb::IMessage<scBattleReadyFinish> {
    private static readonly pb::MessageParser<scBattleReadyFinish> _parser = new pb::MessageParser<scBattleReadyFinish>(() => new scBattleReadyFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scBattleReadyFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scBattleReadyFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scBattleReadyFinish(scBattleReadyFinish other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scBattleReadyFinish Clone() {
      return new scBattleReadyFinish(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scBattleReadyFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scBattleReadyFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scBattleReadyFinish other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗开始
  /// </summary>
  public sealed partial class csNotifyBattleStart : pb::IMessage<csNotifyBattleStart> {
    private static readonly pb::MessageParser<csNotifyBattleStart> _parser = new pb::MessageParser<csNotifyBattleStart>(() => new csNotifyBattleStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csNotifyBattleStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyBattleStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyBattleStart(csNotifyBattleStart other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csNotifyBattleStart Clone() {
      return new csNotifyBattleStart(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csNotifyBattleStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csNotifyBattleStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csNotifyBattleStart other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scNotifyBattleStart : pb::IMessage<scNotifyBattleStart> {
    private static readonly pb::MessageParser<scNotifyBattleStart> _parser = new pb::MessageParser<scNotifyBattleStart>(() => new scNotifyBattleStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyBattleStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBattleStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBattleStart(scNotifyBattleStart other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBattleStart Clone() {
      return new scNotifyBattleStart(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyBattleStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyBattleStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyBattleStart other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 移动单位
  /// </summary>
  public sealed partial class csMoveEntity : pb::IMessage<csMoveEntity> {
    private static readonly pb::MessageParser<csMoveEntity> _parser = new pb::MessageParser<csMoveEntity>(() => new csMoveEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csMoveEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csMoveEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csMoveEntity(csMoveEntity other) : this() {
      guid_ = other.guid_;
      TargetPos = other.targetPos_ != null ? other.TargetPos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csMoveEntity Clone() {
      return new csMoveEntity(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "targetPos" field.</summary>
    public const int TargetPosFieldNumber = 2;
    private global::NetProto.Vector3Proto targetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto TargetPos {
      get { return targetPos_; }
      set {
        targetPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csMoveEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csMoveEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (!object.Equals(TargetPos, other.TargetPos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (targetPos_ != null) hash ^= TargetPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (targetPos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (targetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csMoveEntity other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.targetPos_ != null) {
        if (targetPos_ == null) {
          targetPos_ = new global::NetProto.Vector3Proto();
        }
        TargetPos.MergeFrom(other.TargetPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 18: {
            if (targetPos_ == null) {
              targetPos_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(targetPos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class scMoveEntity : pb::IMessage<scMoveEntity> {
    private static readonly pb::MessageParser<scMoveEntity> _parser = new pb::MessageParser<scMoveEntity>(() => new scMoveEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scMoveEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scMoveEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scMoveEntity(scMoveEntity other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scMoveEntity Clone() {
      return new scMoveEntity(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scMoveEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scMoveEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scMoveEntity other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 使用技能
  /// </summary>
  public sealed partial class csUseSkill : pb::IMessage<csUseSkill> {
    private static readonly pb::MessageParser<csUseSkill> _parser = new pb::MessageParser<csUseSkill>(() => new csUseSkill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csUseSkill(csUseSkill other) : this() {
      guid_ = other.guid_;
      skillId_ = other.skillId_;
      TargetPos = other.targetPos_ != null ? other.TargetPos.Clone() : null;
      targetGuid_ = other.targetGuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csUseSkill Clone() {
      return new csUseSkill(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "targetPos" field.</summary>
    public const int TargetPosFieldNumber = 3;
    private global::NetProto.Vector3Proto targetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto TargetPos {
      get { return targetPos_; }
      set {
        targetPos_ = value;
      }
    }

    /// <summary>Field number for the "targetGuid" field.</summary>
    public const int TargetGuidFieldNumber = 4;
    private int targetGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetGuid {
      get { return targetGuid_; }
      set {
        targetGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (SkillId != other.SkillId) return false;
      if (!object.Equals(TargetPos, other.TargetPos)) return false;
      if (TargetGuid != other.TargetGuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (targetPos_ != null) hash ^= TargetPos.GetHashCode();
      if (TargetGuid != 0) hash ^= TargetGuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (targetPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TargetPos);
      }
      if (TargetGuid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (targetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPos);
      }
      if (TargetGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csUseSkill other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.targetPos_ != null) {
        if (targetPos_ == null) {
          targetPos_ = new global::NetProto.Vector3Proto();
        }
        TargetPos.MergeFrom(other.TargetPos);
      }
      if (other.TargetGuid != 0) {
        TargetGuid = other.TargetGuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 26: {
            if (targetPos_ == null) {
              targetPos_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(targetPos_);
            break;
          }
          case 32: {
            TargetGuid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scUseSkill : pb::IMessage<scUseSkill> {
    private static readonly pb::MessageParser<scUseSkill> _parser = new pb::MessageParser<scUseSkill>(() => new scUseSkill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scUseSkill(scUseSkill other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scUseSkill Clone() {
      return new scUseSkill(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scUseSkill other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发送剧情结束(由于剧情银每个玩家不一致 所以现在方案时强行等待所有玩家剧情结束)
  /// </summary>
  public sealed partial class csClientPlotEnd : pb::IMessage<csClientPlotEnd> {
    private static readonly pb::MessageParser<csClientPlotEnd> _parser = new pb::MessageParser<csClientPlotEnd>(() => new csClientPlotEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csClientPlotEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csClientPlotEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csClientPlotEnd(csClientPlotEnd other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csClientPlotEnd Clone() {
      return new csClientPlotEnd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csClientPlotEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csClientPlotEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csClientPlotEnd other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scClientPlotEnd : pb::IMessage<scClientPlotEnd> {
    private static readonly pb::MessageParser<scClientPlotEnd> _parser = new pb::MessageParser<scClientPlotEnd>(() => new scClientPlotEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scClientPlotEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scClientPlotEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scClientPlotEnd(scClientPlotEnd other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scClientPlotEnd Clone() {
      return new scClientPlotEnd(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scClientPlotEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scClientPlotEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scClientPlotEnd other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端通知 创建多个单位实体
  /// </summary>
  public sealed partial class scNotifyCreateEntities : pb::IMessage<scNotifyCreateEntities> {
    private static readonly pb::MessageParser<scNotifyCreateEntities> _parser = new pb::MessageParser<scNotifyCreateEntities>(() => new scNotifyCreateEntities());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyCreateEntities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateEntities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateEntities(scNotifyCreateEntities other) : this() {
      battleEntities_ = other.battleEntities_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateEntities Clone() {
      return new scNotifyCreateEntities(this);
    }

    /// <summary>Field number for the "battleEntities" field.</summary>
    public const int BattleEntitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NetProto.BattleEntityProto> _repeated_battleEntities_codec
        = pb::FieldCodec.ForMessage(10, global::NetProto.BattleEntityProto.Parser);
    private readonly pbc::RepeatedField<global::NetProto.BattleEntityProto> battleEntities_ = new pbc::RepeatedField<global::NetProto.BattleEntityProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.BattleEntityProto> BattleEntities {
      get { return battleEntities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyCreateEntities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyCreateEntities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!battleEntities_.Equals(other.battleEntities_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= battleEntities_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      battleEntities_.WriteTo(output, _repeated_battleEntities_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += battleEntities_.CalculateSize(_repeated_battleEntities_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyCreateEntities other) {
      if (other == null) {
        return;
      }
      battleEntities_.Add(other.battleEntities_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            battleEntities_.AddEntriesFrom(input, _repeated_battleEntities_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端通知 有单位实体开始按照路径移动
  /// </summary>
  public sealed partial class scNotifyEntityMoveByPath : pb::IMessage<scNotifyEntityMoveByPath> {
    private static readonly pb::MessageParser<scNotifyEntityMoveByPath> _parser = new pb::MessageParser<scNotifyEntityMoveByPath>(() => new scNotifyEntityMoveByPath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyEntityMoveByPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityMoveByPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityMoveByPath(scNotifyEntityMoveByPath other) : this() {
      guid_ = other.guid_;
      StartPos = other.startPos_ != null ? other.StartPos.Clone() : null;
      pathList_ = other.pathList_.Clone();
      moveSpeed_ = other.moveSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityMoveByPath Clone() {
      return new scNotifyEntityMoveByPath(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "startPos" field.</summary>
    public const int StartPosFieldNumber = 2;
    private global::NetProto.Vector3Proto startPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto StartPos {
      get { return startPos_; }
      set {
        startPos_ = value;
      }
    }

    /// <summary>Field number for the "pathList" field.</summary>
    public const int PathListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NetProto.Vector3Proto> _repeated_pathList_codec
        = pb::FieldCodec.ForMessage(26, global::NetProto.Vector3Proto.Parser);
    private readonly pbc::RepeatedField<global::NetProto.Vector3Proto> pathList_ = new pbc::RepeatedField<global::NetProto.Vector3Proto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.Vector3Proto> PathList {
      get { return pathList_; }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 4;
    private int moveSpeed_;
    /// <summary>
    /// * 1000
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyEntityMoveByPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyEntityMoveByPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (!object.Equals(StartPos, other.StartPos)) return false;
      if(!pathList_.Equals(other.pathList_)) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (startPos_ != null) hash ^= StartPos.GetHashCode();
      hash ^= pathList_.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (startPos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartPos);
      }
      pathList_.WriteTo(output, _repeated_pathList_codec);
      if (MoveSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (startPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPos);
      }
      size += pathList_.CalculateSize(_repeated_pathList_codec);
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyEntityMoveByPath other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.startPos_ != null) {
        if (startPos_ == null) {
          startPos_ = new global::NetProto.Vector3Proto();
        }
        StartPos.MergeFrom(other.StartPos);
      }
      pathList_.Add(other.pathList_);
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 18: {
            if (startPos_ == null) {
              startPos_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(startPos_);
            break;
          }
          case 26: {
            pathList_.AddEntriesFrom(input, _repeated_pathList_codec);
            break;
          }
          case 32: {
            MoveSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端通知 有单位实体停止移动
  /// </summary>
  public sealed partial class scNotifyEntityStopMove : pb::IMessage<scNotifyEntityStopMove> {
    private static readonly pb::MessageParser<scNotifyEntityStopMove> _parser = new pb::MessageParser<scNotifyEntityStopMove>(() => new scNotifyEntityStopMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyEntityStopMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityStopMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityStopMove(scNotifyEntityStopMove other) : this() {
      guid_ = other.guid_;
      EndPos = other.endPos_ != null ? other.EndPos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityStopMove Clone() {
      return new scNotifyEntityStopMove(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "endPos" field.</summary>
    public const int EndPosFieldNumber = 2;
    private global::NetProto.Vector3Proto endPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto EndPos {
      get { return endPos_; }
      set {
        endPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyEntityStopMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyEntityStopMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (!object.Equals(EndPos, other.EndPos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (endPos_ != null) hash ^= EndPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (endPos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (endPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyEntityStopMove other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.endPos_ != null) {
        if (endPos_ == null) {
          endPos_ = new global::NetProto.Vector3Proto();
        }
        EndPos.MergeFrom(other.EndPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 18: {
            if (endPos_ == null) {
              endPos_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(endPos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端通知 有单位改变了朝向
  /// </summary>
  public sealed partial class scNotifyEntityDir : pb::IMessage<scNotifyEntityDir> {
    private static readonly pb::MessageParser<scNotifyEntityDir> _parser = new pb::MessageParser<scNotifyEntityDir>(() => new scNotifyEntityDir());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyEntityDir> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityDir() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityDir(scNotifyEntityDir other) : this() {
      guid_ = other.guid_;
      Dir = other.dir_ != null ? other.Dir.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityDir Clone() {
      return new scNotifyEntityDir(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 2;
    private global::NetProto.Vector3Proto dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyEntityDir);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyEntityDir other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (!object.Equals(Dir, other.Dir)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (dir_ != null) hash ^= Dir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (dir_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Dir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyEntityDir other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.dir_ != null) {
        if (dir_ == null) {
          dir_ = new global::NetProto.Vector3Proto();
        }
        Dir.MergeFrom(other.Dir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 18: {
            if (dir_ == null) {
              dir_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(dir_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端通知 有单位使用技能
  /// </summary>
  public sealed partial class scNotifyEntityUseSkill : pb::IMessage<scNotifyEntityUseSkill> {
    private static readonly pb::MessageParser<scNotifyEntityUseSkill> _parser = new pb::MessageParser<scNotifyEntityUseSkill>(() => new scNotifyEntityUseSkill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyEntityUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityUseSkill(scNotifyEntityUseSkill other) : this() {
      guid_ = other.guid_;
      resId_ = other.resId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityUseSkill Clone() {
      return new scNotifyEntityUseSkill(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "resId" field.</summary>
    public const int ResIdFieldNumber = 2;
    private int resId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResId {
      get { return resId_; }
      set {
        resId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyEntityUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyEntityUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (ResId != other.ResId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (ResId != 0) hash ^= ResId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (ResId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ResId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (ResId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyEntityUseSkill other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.ResId != 0) {
        ResId = other.ResId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 16: {
            ResId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端通知 有技能效果创建
  /// </summary>
  public sealed partial class scNotifyCreateSkillEffect : pb::IMessage<scNotifyCreateSkillEffect> {
    private static readonly pb::MessageParser<scNotifyCreateSkillEffect> _parser = new pb::MessageParser<scNotifyCreateSkillEffect>(() => new scNotifyCreateSkillEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyCreateSkillEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateSkillEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateSkillEffect(scNotifyCreateSkillEffect other) : this() {
      guid_ = other.guid_;
      resId_ = other.resId_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      followEntityGuid_ = other.followEntityGuid_;
      lastTime_ = other.lastTime_;
      isAutoDestroy_ = other.isAutoDestroy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyCreateSkillEffect Clone() {
      return new scNotifyCreateSkillEffect(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "resId" field.</summary>
    public const int ResIdFieldNumber = 2;
    private int resId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResId {
      get { return resId_; }
      set {
        resId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::NetProto.Vector3Proto position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "followEntityGuid" field.</summary>
    public const int FollowEntityGuidFieldNumber = 4;
    private int followEntityGuid_;
    /// <summary>
    /// 跟随的实体 id 一般 buff 都会一直跟随
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FollowEntityGuid {
      get { return followEntityGuid_; }
      set {
        followEntityGuid_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 5;
    private int lastTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    /// <summary>Field number for the "isAutoDestroy" field.</summary>
    public const int IsAutoDestroyFieldNumber = 6;
    private bool isAutoDestroy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoDestroy {
      get { return isAutoDestroy_; }
      set {
        isAutoDestroy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyCreateSkillEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyCreateSkillEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (ResId != other.ResId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (FollowEntityGuid != other.FollowEntityGuid) return false;
      if (LastTime != other.LastTime) return false;
      if (IsAutoDestroy != other.IsAutoDestroy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (ResId != 0) hash ^= ResId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (FollowEntityGuid != 0) hash ^= FollowEntityGuid.GetHashCode();
      if (LastTime != 0) hash ^= LastTime.GetHashCode();
      if (IsAutoDestroy != false) hash ^= IsAutoDestroy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (ResId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ResId);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (FollowEntityGuid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FollowEntityGuid);
      }
      if (LastTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastTime);
      }
      if (IsAutoDestroy != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsAutoDestroy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (ResId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (FollowEntityGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FollowEntityGuid);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      if (IsAutoDestroy != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyCreateSkillEffect other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.ResId != 0) {
        ResId = other.ResId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::NetProto.Vector3Proto();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.FollowEntityGuid != 0) {
        FollowEntityGuid = other.FollowEntityGuid;
      }
      if (other.LastTime != 0) {
        LastTime = other.LastTime;
      }
      if (other.IsAutoDestroy != false) {
        IsAutoDestroy = other.IsAutoDestroy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 16: {
            ResId = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(position_);
            break;
          }
          case 32: {
            FollowEntityGuid = input.ReadInt32();
            break;
          }
          case 40: {
            LastTime = input.ReadInt32();
            break;
          }
          case 48: {
            IsAutoDestroy = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端通知 有技能效果开始移动
  /// </summary>
  public sealed partial class scNotifySkillEffectStartMove : pb::IMessage<scNotifySkillEffectStartMove> {
    private static readonly pb::MessageParser<scNotifySkillEffectStartMove> _parser = new pb::MessageParser<scNotifySkillEffectStartMove>(() => new scNotifySkillEffectStartMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifySkillEffectStartMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySkillEffectStartMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySkillEffectStartMove(scNotifySkillEffectStartMove other) : this() {
      effectGuid_ = other.effectGuid_;
      StartPos = other.startPos_ != null ? other.StartPos.Clone() : null;
      TargetPos = other.targetPos_ != null ? other.TargetPos.Clone() : null;
      targetGuid_ = other.targetGuid_;
      isFollow_ = other.isFollow_;
      moveSpeed_ = other.moveSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySkillEffectStartMove Clone() {
      return new scNotifySkillEffectStartMove(this);
    }

    /// <summary>Field number for the "effectGuid" field.</summary>
    public const int EffectGuidFieldNumber = 1;
    private int effectGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectGuid {
      get { return effectGuid_; }
      set {
        effectGuid_ = value;
      }
    }

    /// <summary>Field number for the "startPos" field.</summary>
    public const int StartPosFieldNumber = 2;
    private global::NetProto.Vector3Proto startPos_;
    /// <summary>
    /// 创建的时候已经赋值了 所以这个没有用 先预留
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto StartPos {
      get { return startPos_; }
      set {
        startPos_ = value;
      }
    }

    /// <summary>Field number for the "targetPos" field.</summary>
    public const int TargetPosFieldNumber = 3;
    private global::NetProto.Vector3Proto targetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NetProto.Vector3Proto TargetPos {
      get { return targetPos_; }
      set {
        targetPos_ = value;
      }
    }

    /// <summary>Field number for the "targetGuid" field.</summary>
    public const int TargetGuidFieldNumber = 4;
    private int targetGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetGuid {
      get { return targetGuid_; }
      set {
        targetGuid_ = value;
      }
    }

    /// <summary>Field number for the "isFollow" field.</summary>
    public const int IsFollowFieldNumber = 5;
    private bool isFollow_;
    /// <summary>
    /// 实际上 如果 targetGuid 不为 0 那么一定跟随 这个应该就是 true 所以 这个目前貌似没有用 待定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFollow {
      get { return isFollow_; }
      set {
        isFollow_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 6;
    private int moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifySkillEffectStartMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifySkillEffectStartMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectGuid != other.EffectGuid) return false;
      if (!object.Equals(StartPos, other.StartPos)) return false;
      if (!object.Equals(TargetPos, other.TargetPos)) return false;
      if (TargetGuid != other.TargetGuid) return false;
      if (IsFollow != other.IsFollow) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectGuid != 0) hash ^= EffectGuid.GetHashCode();
      if (startPos_ != null) hash ^= StartPos.GetHashCode();
      if (targetPos_ != null) hash ^= TargetPos.GetHashCode();
      if (TargetGuid != 0) hash ^= TargetGuid.GetHashCode();
      if (IsFollow != false) hash ^= IsFollow.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectGuid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectGuid);
      }
      if (startPos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartPos);
      }
      if (targetPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TargetPos);
      }
      if (TargetGuid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetGuid);
      }
      if (IsFollow != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsFollow);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MoveSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectGuid);
      }
      if (startPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPos);
      }
      if (targetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPos);
      }
      if (TargetGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetGuid);
      }
      if (IsFollow != false) {
        size += 1 + 1;
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifySkillEffectStartMove other) {
      if (other == null) {
        return;
      }
      if (other.EffectGuid != 0) {
        EffectGuid = other.EffectGuid;
      }
      if (other.startPos_ != null) {
        if (startPos_ == null) {
          startPos_ = new global::NetProto.Vector3Proto();
        }
        StartPos.MergeFrom(other.StartPos);
      }
      if (other.targetPos_ != null) {
        if (targetPos_ == null) {
          targetPos_ = new global::NetProto.Vector3Proto();
        }
        TargetPos.MergeFrom(other.TargetPos);
      }
      if (other.TargetGuid != 0) {
        TargetGuid = other.TargetGuid;
      }
      if (other.IsFollow != false) {
        IsFollow = other.IsFollow;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EffectGuid = input.ReadInt32();
            break;
          }
          case 18: {
            if (startPos_ == null) {
              startPos_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(startPos_);
            break;
          }
          case 26: {
            if (targetPos_ == null) {
              targetPos_ = new global::NetProto.Vector3Proto();
            }
            input.ReadMessage(targetPos_);
            break;
          }
          case 32: {
            TargetGuid = input.ReadInt32();
            break;
          }
          case 40: {
            IsFollow = input.ReadBool();
            break;
          }
          case 48: {
            MoveSpeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器通知 技能效果更新信息
  /// </summary>
  public sealed partial class scNotifyBuffUpdate : pb::IMessage<scNotifyBuffUpdate> {
    private static readonly pb::MessageParser<scNotifyBuffUpdate> _parser = new pb::MessageParser<scNotifyBuffUpdate>(() => new scNotifyBuffUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyBuffUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBuffUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBuffUpdate(scNotifyBuffUpdate other) : this() {
      guid_ = other.guid_;
      lastTime_ = other.lastTime_;
      buffLayer_ = other.buffLayer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBuffUpdate Clone() {
      return new scNotifyBuffUpdate(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private int guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "lastTime" field.</summary>
    public const int LastTimeFieldNumber = 2;
    private int lastTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTime {
      get { return lastTime_; }
      set {
        lastTime_ = value;
      }
    }

    /// <summary>Field number for the "buffLayer" field.</summary>
    public const int BuffLayerFieldNumber = 3;
    private int buffLayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffLayer {
      get { return buffLayer_; }
      set {
        buffLayer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyBuffUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyBuffUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (LastTime != other.LastTime) return false;
      if (BuffLayer != other.BuffLayer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (LastTime != 0) hash ^= LastTime.GetHashCode();
      if (BuffLayer != 0) hash ^= BuffLayer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Guid);
      }
      if (LastTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastTime);
      }
      if (BuffLayer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuffLayer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guid);
      }
      if (LastTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTime);
      }
      if (BuffLayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffLayer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyBuffUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.LastTime != 0) {
        LastTime = other.LastTime;
      }
      if (other.BuffLayer != 0) {
        BuffLayer = other.BuffLayer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadInt32();
            break;
          }
          case 16: {
            LastTime = input.ReadInt32();
            break;
          }
          case 24: {
            BuffLayer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务端通知 有技能效果销毁
  /// </summary>
  public sealed partial class scNotifySkillEffectDestroy : pb::IMessage<scNotifySkillEffectDestroy> {
    private static readonly pb::MessageParser<scNotifySkillEffectDestroy> _parser = new pb::MessageParser<scNotifySkillEffectDestroy>(() => new scNotifySkillEffectDestroy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifySkillEffectDestroy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySkillEffectDestroy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySkillEffectDestroy(scNotifySkillEffectDestroy other) : this() {
      effectGuid_ = other.effectGuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySkillEffectDestroy Clone() {
      return new scNotifySkillEffectDestroy(this);
    }

    /// <summary>Field number for the "effectGuid" field.</summary>
    public const int EffectGuidFieldNumber = 1;
    private int effectGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectGuid {
      get { return effectGuid_; }
      set {
        effectGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifySkillEffectDestroy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifySkillEffectDestroy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectGuid != other.EffectGuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectGuid != 0) hash ^= EffectGuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectGuid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifySkillEffectDestroy other) {
      if (other == null) {
        return;
      }
      if (other.EffectGuid != 0) {
        EffectGuid = other.EffectGuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EffectGuid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleEntityValueProto : pb::IMessage<BattleEntityValueProto> {
    private static readonly pb::MessageParser<BattleEntityValueProto> _parser = new pb::MessageParser<BattleEntityValueProto>(() => new BattleEntityValueProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEntityValueProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityValueProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityValueProto(BattleEntityValueProto other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityValueProto Clone() {
      return new BattleEntityValueProto(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///  1 当前生命值, 2 当前法力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEntityValueProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEntityValueProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEntityValueProto other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同步实体数据值
  /// </summary>
  public sealed partial class scNotifySyncEntityValue : pb::IMessage<scNotifySyncEntityValue> {
    private static readonly pb::MessageParser<scNotifySyncEntityValue> _parser = new pb::MessageParser<scNotifySyncEntityValue>(() => new scNotifySyncEntityValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifySyncEntityValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySyncEntityValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySyncEntityValue(scNotifySyncEntityValue other) : this() {
      entityGuid_ = other.entityGuid_;
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySyncEntityValue Clone() {
      return new scNotifySyncEntityValue(this);
    }

    /// <summary>Field number for the "entityGuid" field.</summary>
    public const int EntityGuidFieldNumber = 1;
    private int entityGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityGuid {
      get { return entityGuid_; }
      set {
        entityGuid_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NetProto.BattleEntityValueProto> _repeated_values_codec
        = pb::FieldCodec.ForMessage(18, global::NetProto.BattleEntityValueProto.Parser);
    private readonly pbc::RepeatedField<global::NetProto.BattleEntityValueProto> values_ = new pbc::RepeatedField<global::NetProto.BattleEntityValueProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.BattleEntityValueProto> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifySyncEntityValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifySyncEntityValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityGuid != other.EntityGuid) return false;
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityGuid != 0) hash ^= EntityGuid.GetHashCode();
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityGuid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityGuid);
      }
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityGuid);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifySyncEntityValue other) {
      if (other == null) {
        return;
      }
      if (other.EntityGuid != 0) {
        EntityGuid = other.EntityGuid;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityGuid = input.ReadInt32();
            break;
          }
          case 18: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleEntityAttrProto : pb::IMessage<BattleEntityAttrProto> {
    private static readonly pb::MessageParser<BattleEntityAttrProto> _parser = new pb::MessageParser<BattleEntityAttrProto>(() => new BattleEntityAttrProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleEntityAttrProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityAttrProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityAttrProto(BattleEntityAttrProto other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleEntityAttrProto Clone() {
      return new BattleEntityAttrProto(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleEntityAttrProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleEntityAttrProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleEntityAttrProto other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同步实体属性
  /// </summary>
  public sealed partial class scNotifySyncEntityAttr : pb::IMessage<scNotifySyncEntityAttr> {
    private static readonly pb::MessageParser<scNotifySyncEntityAttr> _parser = new pb::MessageParser<scNotifySyncEntityAttr>(() => new scNotifySyncEntityAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifySyncEntityAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySyncEntityAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySyncEntityAttr(scNotifySyncEntityAttr other) : this() {
      entityGuid_ = other.entityGuid_;
      attrs_ = other.attrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySyncEntityAttr Clone() {
      return new scNotifySyncEntityAttr(this);
    }

    /// <summary>Field number for the "entityGuid" field.</summary>
    public const int EntityGuidFieldNumber = 1;
    private int entityGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityGuid {
      get { return entityGuid_; }
      set {
        entityGuid_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NetProto.BattleEntityAttrProto> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(18, global::NetProto.BattleEntityAttrProto.Parser);
    private readonly pbc::RepeatedField<global::NetProto.BattleEntityAttrProto> attrs_ = new pbc::RepeatedField<global::NetProto.BattleEntityAttrProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.BattleEntityAttrProto> Attrs {
      get { return attrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifySyncEntityAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifySyncEntityAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityGuid != other.EntityGuid) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityGuid != 0) hash ^= EntityGuid.GetHashCode();
      hash ^= attrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityGuid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityGuid);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityGuid);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifySyncEntityAttr other) {
      if (other == null) {
        return;
      }
      if (other.EntityGuid != 0) {
        EntityGuid = other.EntityGuid;
      }
      attrs_.Add(other.attrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityGuid = input.ReadInt32();
            break;
          }
          case 18: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 有实体死亡
  /// </summary>
  public sealed partial class scNotifyEntityDead : pb::IMessage<scNotifyEntityDead> {
    private static readonly pb::MessageParser<scNotifyEntityDead> _parser = new pb::MessageParser<scNotifyEntityDead>(() => new scNotifyEntityDead());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyEntityDead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityDead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityDead(scNotifyEntityDead other) : this() {
      entityGuid_ = other.entityGuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyEntityDead Clone() {
      return new scNotifyEntityDead(this);
    }

    /// <summary>Field number for the "entityGuid" field.</summary>
    public const int EntityGuidFieldNumber = 1;
    private int entityGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityGuid {
      get { return entityGuid_; }
      set {
        entityGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyEntityDead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyEntityDead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityGuid != other.EntityGuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityGuid != 0) hash ^= EntityGuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityGuid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityGuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityGuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyEntityDead other) {
      if (other == null) {
        return;
      }
      if (other.EntityGuid != 0) {
        EntityGuid = other.EntityGuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EntityGuid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器通知 播放剧情
  /// </summary>
  public sealed partial class scNotifyPlayPlot : pb::IMessage<scNotifyPlayPlot> {
    private static readonly pb::MessageParser<scNotifyPlayPlot> _parser = new pb::MessageParser<scNotifyPlayPlot>(() => new scNotifyPlayPlot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyPlayPlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlayPlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlayPlot(scNotifyPlayPlot other) : this() {
      plotName_ = other.plotName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlayPlot Clone() {
      return new scNotifyPlayPlot(this);
    }

    /// <summary>Field number for the "plotName" field.</summary>
    public const int PlotNameFieldNumber = 1;
    private string plotName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlotName {
      get { return plotName_; }
      set {
        plotName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyPlayPlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyPlayPlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlotName != other.PlotName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlotName.Length != 0) hash ^= PlotName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlotName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlotName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlotName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlotName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyPlayPlot other) {
      if (other == null) {
        return;
      }
      if (other.PlotName.Length != 0) {
        PlotName = other.PlotName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlotName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器通知 剧情结束(所有玩家)
  /// </summary>
  public sealed partial class scNotifyPlotEnd : pb::IMessage<scNotifyPlotEnd> {
    private static readonly pb::MessageParser<scNotifyPlotEnd> _parser = new pb::MessageParser<scNotifyPlotEnd>(() => new scNotifyPlotEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyPlotEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlotEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlotEnd(scNotifyPlotEnd other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyPlotEnd Clone() {
      return new scNotifyPlotEnd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyPlotEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyPlotEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyPlotEnd other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 服务器通知 隐藏 entity 显示
  /// </summary>
  public sealed partial class scNotifySetEntityShowState : pb::IMessage<scNotifySetEntityShowState> {
    private static readonly pb::MessageParser<scNotifySetEntityShowState> _parser = new pb::MessageParser<scNotifySetEntityShowState>(() => new scNotifySetEntityShowState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifySetEntityShowState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySetEntityShowState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySetEntityShowState(scNotifySetEntityShowState other) : this() {
      guids_ = other.guids_.Clone();
      isShow_ = other.isShow_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifySetEntityShowState Clone() {
      return new scNotifySetEntityShowState(this);
    }

    /// <summary>Field number for the "guids" field.</summary>
    public const int GuidsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_guids_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> guids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Guids {
      get { return guids_; }
    }

    /// <summary>Field number for the "isShow" field.</summary>
    public const int IsShowFieldNumber = 2;
    private bool isShow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShow {
      get { return isShow_; }
      set {
        isShow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifySetEntityShowState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifySetEntityShowState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!guids_.Equals(other.guids_)) return false;
      if (IsShow != other.IsShow) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= guids_.GetHashCode();
      if (IsShow != false) hash ^= IsShow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guids_.WriteTo(output, _repeated_guids_codec);
      if (IsShow != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsShow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guids_.CalculateSize(_repeated_guids_codec);
      if (IsShow != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifySetEntityShowState other) {
      if (other == null) {
        return;
      }
      guids_.Add(other.guids_);
      if (other.IsShow != false) {
        IsShow = other.IsShow;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            guids_.AddEntriesFrom(input, _repeated_guids_codec);
            break;
          }
          case 16: {
            IsShow = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知战斗结束
  /// </summary>
  public sealed partial class scNotifyBattleEnd : pb::IMessage<scNotifyBattleEnd> {
    private static readonly pb::MessageParser<scNotifyBattleEnd> _parser = new pb::MessageParser<scNotifyBattleEnd>(() => new scNotifyBattleEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scNotifyBattleEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBattleEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBattleEnd(scNotifyBattleEnd other) : this() {
      isWin_ = other.isWin_;
      rewards_ = other.rewards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scNotifyBattleEnd Clone() {
      return new scNotifyBattleEnd(this);
    }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 1;
    private int isWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NetProto.Item> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::NetProto.Item.Parser);
    private readonly pbc::RepeatedField<global::NetProto.Item> rewards_ = new pbc::RepeatedField<global::NetProto.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NetProto.Item> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scNotifyBattleEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scNotifyBattleEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsWin != other.IsWin) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsWin != 0) hash ^= IsWin.GetHashCode();
      hash ^= rewards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsWin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IsWin);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsWin);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scNotifyBattleEnd other) {
      if (other == null) {
        return;
      }
      if (other.IsWin != 0) {
        IsWin = other.IsWin;
      }
      rewards_.Add(other.rewards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsWin = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 转发战斗协议给战斗服务器(输入)
  /// </summary>
  public sealed partial class csTransitionBattle : pb::IMessage<csTransitionBattle> {
    private static readonly pb::MessageParser<csTransitionBattle> _parser = new pb::MessageParser<csTransitionBattle>(() => new csTransitionBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csTransitionBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csTransitionBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csTransitionBattle(csTransitionBattle other) : this() {
      cmd_ = other.cmd_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csTransitionBattle Clone() {
      return new csTransitionBattle(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private int cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csTransitionBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csTransitionBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cmd);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cmd);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csTransitionBattle other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cmd = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class scTransitionBattle : pb::IMessage<scTransitionBattle> {
    private static readonly pb::MessageParser<scTransitionBattle> _parser = new pb::MessageParser<scTransitionBattle>(() => new scTransitionBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scTransitionBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scTransitionBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scTransitionBattle(scTransitionBattle other) : this() {
      err_ = other.err_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scTransitionBattle Clone() {
      return new scTransitionBattle(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scTransitionBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scTransitionBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scTransitionBattle other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 转发战斗协议给玩家(输出)
  /// </summary>
  public sealed partial class csTransitionBattle2Player : pb::IMessage<csTransitionBattle2Player> {
    private static readonly pb::MessageParser<csTransitionBattle2Player> _parser = new pb::MessageParser<csTransitionBattle2Player>(() => new csTransitionBattle2Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<csTransitionBattle2Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csTransitionBattle2Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csTransitionBattle2Player(csTransitionBattle2Player other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public csTransitionBattle2Player Clone() {
      return new csTransitionBattle2Player(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as csTransitionBattle2Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(csTransitionBattle2Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(csTransitionBattle2Player other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class scTransitionBattle2Player : pb::IMessage<scTransitionBattle2Player> {
    private static readonly pb::MessageParser<scTransitionBattle2Player> _parser = new pb::MessageParser<scTransitionBattle2Player>(() => new scTransitionBattle2Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<scTransitionBattle2Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NetProto.BattleReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scTransitionBattle2Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scTransitionBattle2Player(scTransitionBattle2Player other) : this() {
      cmd_ = other.cmd_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public scTransitionBattle2Player Clone() {
      return new scTransitionBattle2Player(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private int cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as scTransitionBattle2Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(scTransitionBattle2Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cmd);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cmd);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(scTransitionBattle2Player other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cmd = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
